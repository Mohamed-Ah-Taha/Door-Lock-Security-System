
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  000036a8  0000373c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800118  00800118  000037f4  2**0
                  ALLOC
  3 .stab         00003294  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001186  00000000  00000000  00006a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c35b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__vector_3>
      10:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__vector_8>
      24:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0b 	call	0x16ca	; 0x16ca <main>
      8a:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e0       	ldi	r26, 0x08	; 8
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:
 *       				Functions Definitions		  			 		  	   *
 *******************************************************************************/

/* Public (Shared) Functions */
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1) /* to make sure i don't get out of the function till it return something */
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1) /* to make sure i don't get out of the function till it return something */
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4) /* For static Configurations */

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:
 *       				Functions Definitions		  			 		  	   *
 *******************************************************************************/

/* Public (Shared) Functions */
void LCD_init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
     d4a:	e7 e3       	ldi	r30, 0x37	; 55
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d52:	a4 e3       	ldi	r26, 0x34	; 52
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e4 e3       	ldi	r30, 0x34	; 52
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	87 60       	ori	r24, 0x07	; 7
     d5e:	8c 93       	st	X, r24

	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d66:	8c e0       	ldi	r24, 0x0C	; 12
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	e9 97       	sbiw	r28, 0x39	; 57
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d8e:	a5 e3       	ldi	r26, 0x35	; 53
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e3       	ldi	r30, 0x35	; 53
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d9c:	a5 e3       	ldi	r26, 0x35	; 53
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e5 e3       	ldi	r30, 0x35	; 53
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	8c 93       	st	X, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	8d ab       	std	Y+53, r24	; 0x35
     db4:	9e ab       	std	Y+54, r25	; 0x36
     db6:	af ab       	std	Y+55, r26	; 0x37
     db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d a9       	ldd	r22, Y+53	; 0x35
     dbc:	7e a9       	ldd	r23, Y+54	; 0x36
     dbe:	8f a9       	ldd	r24, Y+55	; 0x37
     dc0:	98 ad       	ldd	r25, Y+56	; 0x38
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	53 e4       	ldi	r21, 0x43	; 67
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 ab       	std	Y+49, r24	; 0x31
     dd4:	9a ab       	std	Y+50, r25	; 0x32
     dd6:	ab ab       	std	Y+51, r26	; 0x33
     dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <LCD_sendCommand+0x84>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d a9       	ldd	r22, Y+53	; 0x35
     e16:	7e a9       	ldd	r23, Y+54	; 0x36
     e18:	8f a9       	ldd	r24, Y+55	; 0x37
     e1a:	98 ad       	ldd	r25, Y+56	; 0x38
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <LCD_sendCommand+0xe4>
     e3e:	89 e1       	ldi	r24, 0x19	; 25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_sendCommand+0xd2>
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8f a5       	ldd	r24, Y+47	; 0x2f
     e54:	98 a9       	ldd	r25, Y+48	; 0x30
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	98 ab       	std	Y+48, r25	; 0x30
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5e:	98 a9       	ldd	r25, Y+48	; 0x30
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <LCD_sendCommand+0xc6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	9c a7       	std	Y+44, r25	; 0x2c
     e80:	8b a7       	std	Y+43, r24	; 0x2b
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x10e>
     e8a:	9c a7       	std	Y+44, r25	; 0x2c
     e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e8e:	a5 e3       	ldi	r26, 0x35	; 53
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e5 e3       	ldi	r30, 0x35	; 53
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	8c 93       	st	X, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a e7       	ldi	r20, 0x7A	; 122
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <LCD_sendCommand+0x176>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <LCD_sendCommand+0x1d6>
     f30:	89 e1       	ldi	r24, 0x19	; 25
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_sendCommand+0x1c4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <LCD_sendCommand+0x1b8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x200>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f80:	e8 e3       	ldi	r30, 0x38	; 56
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	80 83       	st	Z, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e8       	ldi	r26, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	53 e4       	ldi	r21, 0x43	; 67
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <LCD_sendCommand+0x262>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <LCD_sendCommand+0x2c2>
    101c:	89 e1       	ldi	r24, 0x19	; 25
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_sendCommand+0x2b0>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <LCD_sendCommand+0x2a4>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x2ec>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    106c:	a5 e3       	ldi	r26, 0x35	; 53
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a e7       	ldi	r20, 0x7A	; 122
    1098:	53 e4       	ldi	r21, 0x43	; 67
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_sendCommand+0x354>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_sendCommand+0x3b4>
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_sendCommand+0x3a2>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_sendCommand+0x396>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x3de>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    115e:	e9 96       	adiw	r28, 0x39	; 57
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e9 97       	sbiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1186:	a5 e3       	ldi	r26, 0x35	; 53
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e3       	ldi	r30, 0x35	; 53
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1194:	a5 e3       	ldi	r26, 0x35	; 53
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e3       	ldi	r30, 0x35	; 53
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8d 7f       	andi	r24, 0xFD	; 253
    11a0:	8c 93       	st	X, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a e7       	ldi	r20, 0x7A	; 122
    11c0:	53 e4       	ldi	r21, 0x43	; 67
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <LCD_displayCharacter+0xe4>
    1236:	89 e1       	ldi	r24, 0x19	; 25
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_displayCharacter+0xd2>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <LCD_displayCharacter+0xc6>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_displayCharacter+0x10e>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	8c 93       	st	X, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a e7       	ldi	r20, 0x7A	; 122
    12b2:	53 e4       	ldi	r21, 0x43	; 67
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_displayCharacter+0x1d6>
    1328:	89 e1       	ldi	r24, 0x19	; 25
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_displayCharacter+0x1c4>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_displayCharacter+0x1b8>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x200>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	89 ad       	ldd	r24, Y+57	; 0x39
    137e:	80 83       	st	Z, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e8       	ldi	r26, 0x80	; 128
    1386:	bf e3       	ldi	r27, 0x3F	; 63
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a e7       	ldi	r20, 0x7A	; 122
    139e:	53 e4       	ldi	r21, 0x43	; 67
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8d 8b       	std	Y+21, r24	; 0x15
    13aa:	9e 8b       	std	Y+22, r25	; 0x16
    13ac:	af 8b       	std	Y+23, r26	; 0x17
    13ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <LCD_displayCharacter+0x2c2>
    1414:	89 e1       	ldi	r24, 0x19	; 25
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	9a 89       	ldd	r25, Y+18	; 0x12
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_displayCharacter+0x2b0>
    1424:	9a 8b       	std	Y+18, r25	; 0x12
    1426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <LCD_displayCharacter+0x2a4>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_displayCharacter+0x2ec>
    1460:	98 8b       	std	Y+16, r25	; 0x10
    1462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1464:	a5 e3       	ldi	r26, 0x35	; 53
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a e7       	ldi	r20, 0x7A	; 122
    1490:	53 e4       	ldi	r21, 0x43	; 67
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayCharacter+0x3b4>
    1506:	89 e1       	ldi	r24, 0x19	; 25
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayCharacter+0x3a2>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayCharacter+0x396>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayCharacter+0x3de>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_goToRowColumn+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_goToRowColumn+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_goToRowColumn+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_goToRowColumn+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_goToRowColumn+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_goToRowColumn+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_goToRowColumn+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_goToRowColumn+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 5f       	subi	r24, 0xF0	; 240
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 5b       	subi	r24, 0xB0	; 176
    1624:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	62 97       	sbiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 0d 1b 	call	0x361a	; 0x361a <itoa>
   LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	62 96       	adiw	r28, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <main>:
void change_pass_option(void);
void write_first_time(void);
void check_first_time(void);

int main(void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	2c 97       	sbiw	r28, 0x0c	; 12
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
	 *******************/

	/*******************
	 *    	LCD        *
	 *******************/
	LCD_init(); /* initialize LCD */
    16de:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>

	/*******************
	 *    	 UART      *
	 *******************/
	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {EIGHT_Bit,Disabled,ONE_Bit,9600};
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	99 87       	std	Y+9, r25	; 0x09
    16e8:	88 87       	std	Y+8, r24	; 0x08
    16ea:	e0 e1       	ldi	r30, 0x10	; 16
    16ec:	f1 e0       	ldi	r31, 0x01	; 1
    16ee:	fb 87       	std	Y+11, r31	; 0x0b
    16f0:	ea 87       	std	Y+10, r30	; 0x0a
    16f2:	f7 e0       	ldi	r31, 0x07	; 7
    16f4:	fc 87       	std	Y+12, r31	; 0x0c
    16f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    16f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    16fa:	00 80       	ld	r0, Z
    16fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	9b 87       	std	Y+11, r25	; 0x0b
    1704:	8a 87       	std	Y+10, r24	; 0x0a
    1706:	e8 85       	ldd	r30, Y+8	; 0x08
    1708:	f9 85       	ldd	r31, Y+9	; 0x09
    170a:	00 82       	st	Z, r0
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	99 85       	ldd	r25, Y+9	; 0x09
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	99 87       	std	Y+9, r25	; 0x09
    1714:	88 87       	std	Y+8, r24	; 0x08
    1716:	9c 85       	ldd	r25, Y+12	; 0x0c
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	9c 87       	std	Y+12, r25	; 0x0c
    171c:	ec 85       	ldd	r30, Y+12	; 0x0c
    171e:	ee 23       	and	r30, r30
    1720:	51 f7       	brne	.-44     	; 0x16f6 <main+0x2c>
	UART_init(&UART_Config);
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	0e 94 a0 19 	call	0x3340	; 0x3340 <UART_init>
	UART_sendByte(M1_READY); // MC1 is ready
    172a:	81 e1       	ldi	r24, 0x11	; 17
    172c:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
	while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
    1730:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    1734:	80 31       	cpi	r24, 0x10	; 16
    1736:	e1 f7       	brne	.-8      	; 0x1730 <main+0x66>

	while(1)
	{
		/* Application */
		check_first_time();
    1738:	0e 94 39 15 	call	0x2a72	; 0x2a72 <check_first_time>
    173c:	fd cf       	rjmp	.-6      	; 0x1738 <main+0x6e>

0000173e <main_options>:

	return 0;
}

void main_options(void)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	e9 97       	sbiw	r28, 0x39	; 57
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
	uint8 keypad_data = 0; //variable used to store data from keypad
    1752:	19 ae       	std	Y+57, r1	; 0x39
	LCD_clearScreen();
    1754:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1758:	80 e6       	ldi	r24, 0x60	; 96
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("- : Change Pass");
    1768:	8e e6       	ldi	r24, 0x6E	; 110
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	keypad_data = KeyPad_getPressedKey();
    1770:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1774:	89 af       	std	Y+57, r24	; 0x39
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	aa ef       	ldi	r26, 0xFA	; 250
    177c:	b3 e4       	ldi	r27, 0x43	; 67
    177e:	8d ab       	std	Y+53, r24	; 0x35
    1780:	9e ab       	std	Y+54, r25	; 0x36
    1782:	af ab       	std	Y+55, r26	; 0x37
    1784:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6d a9       	ldd	r22, Y+53	; 0x35
    1788:	7e a9       	ldd	r23, Y+54	; 0x36
    178a:	8f a9       	ldd	r24, Y+55	; 0x37
    178c:	98 ad       	ldd	r25, Y+56	; 0x38
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a ef       	ldi	r20, 0xFA	; 250
    1794:	54 e4       	ldi	r21, 0x44	; 68
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	89 ab       	std	Y+49, r24	; 0x31
    17a0:	9a ab       	std	Y+50, r25	; 0x32
    17a2:	ab ab       	std	Y+51, r26	; 0x33
    17a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17a6:	69 a9       	ldd	r22, Y+49	; 0x31
    17a8:	7a a9       	ldd	r23, Y+50	; 0x32
    17aa:	8b a9       	ldd	r24, Y+51	; 0x33
    17ac:	9c a9       	ldd	r25, Y+52	; 0x34
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <main_options+0x8a>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <main_options+0x108>
	else if (__tmp > 65535)
    17c8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ca:	7a a9       	ldd	r23, Y+50	; 0x32
    17cc:	8b a9       	ldd	r24, Y+51	; 0x33
    17ce:	9c a9       	ldd	r25, Y+52	; 0x34
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <main_options+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6d a9       	ldd	r22, Y+53	; 0x35
    17e2:	7e a9       	ldd	r23, Y+54	; 0x36
    17e4:	8f a9       	ldd	r24, Y+55	; 0x37
    17e6:	98 ad       	ldd	r25, Y+56	; 0x38
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <main_options+0xea>
    180a:	88 ec       	ldi	r24, 0xC8	; 200
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9e a7       	std	Y+46, r25	; 0x2e
    1810:	8d a7       	std	Y+45, r24	; 0x2d
    1812:	8d a5       	ldd	r24, Y+45	; 0x2d
    1814:	9e a5       	ldd	r25, Y+46	; 0x2e
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <main_options+0xd8>
    181a:	9e a7       	std	Y+46, r25	; 0x2e
    181c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	98 ab       	std	Y+48, r25	; 0x30
    1826:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	8f a5       	ldd	r24, Y+47	; 0x2f
    182a:	98 a9       	ldd	r25, Y+48	; 0x30
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <main_options+0xcc>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <main_options+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	69 a9       	ldd	r22, Y+49	; 0x31
    1834:	7a a9       	ldd	r23, Y+50	; 0x32
    1836:	8b a9       	ldd	r24, Y+51	; 0x33
    1838:	9c a9       	ldd	r25, Y+52	; 0x34
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
    1846:	8f a5       	ldd	r24, Y+47	; 0x2f
    1848:	98 a9       	ldd	r25, Y+48	; 0x30
    184a:	9c a7       	std	Y+44, r25	; 0x2c
    184c:	8b a7       	std	Y+43, r24	; 0x2b
    184e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1850:	9c a5       	ldd	r25, Y+44	; 0x2c
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <main_options+0x114>
    1856:	9c a7       	std	Y+44, r25	; 0x2c
    1858:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	if(keypad_data == '+')
    185a:	89 ad       	ldd	r24, Y+57	; 0x39
    185c:	8b 32       	cpi	r24, 0x2B	; 43
    185e:	09 f0       	breq	.+2      	; 0x1862 <main_options+0x124>
    1860:	77 c0       	rjmp	.+238    	; 0x1950 <main_options+0x212>
	{
		open_door_option();
    1862:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <open_door_option>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	aa ef       	ldi	r26, 0xFA	; 250
    186c:	b3 e4       	ldi	r27, 0x43	; 67
    186e:	8f a3       	std	Y+39, r24	; 0x27
    1870:	98 a7       	std	Y+40, r25	; 0x28
    1872:	a9 a7       	std	Y+41, r26	; 0x29
    1874:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	6f a1       	ldd	r22, Y+39	; 0x27
    1878:	78 a5       	ldd	r23, Y+40	; 0x28
    187a:	89 a5       	ldd	r24, Y+41	; 0x29
    187c:	9a a5       	ldd	r25, Y+42	; 0x2a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a ef       	ldi	r20, 0xFA	; 250
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8b a3       	std	Y+35, r24	; 0x23
    1890:	9c a3       	std	Y+36, r25	; 0x24
    1892:	ad a3       	std	Y+37, r26	; 0x25
    1894:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <main_options+0x17a>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9a a3       	std	Y+34, r25	; 0x22
    18b4:	89 a3       	std	Y+33, r24	; 0x21
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <main_options+0x1f8>
	else if (__tmp > 65535)
    18b8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ba:	7c a1       	ldd	r23, Y+36	; 0x24
    18bc:	8d a1       	ldd	r24, Y+37	; 0x25
    18be:	9e a1       	ldd	r25, Y+38	; 0x26
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <main_options+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	6f a1       	ldd	r22, Y+39	; 0x27
    18d2:	78 a5       	ldd	r23, Y+40	; 0x28
    18d4:	89 a5       	ldd	r24, Y+41	; 0x29
    18d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9a a3       	std	Y+34, r25	; 0x22
    18f6:	89 a3       	std	Y+33, r24	; 0x21
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <main_options+0x1da>
    18fa:	88 ec       	ldi	r24, 0xC8	; 200
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	98 a3       	std	Y+32, r25	; 0x20
    1900:	8f 8f       	std	Y+31, r24	; 0x1f
    1902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1904:	98 a1       	ldd	r25, Y+32	; 0x20
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <main_options+0x1c8>
    190a:	98 a3       	std	Y+32, r25	; 0x20
    190c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	89 a1       	ldd	r24, Y+33	; 0x21
    1910:	9a a1       	ldd	r25, Y+34	; 0x22
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <main_options+0x1bc>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <main_options+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	6b a1       	ldd	r22, Y+35	; 0x23
    1924:	7c a1       	ldd	r23, Y+36	; 0x24
    1926:	8d a1       	ldd	r24, Y+37	; 0x25
    1928:	9e a1       	ldd	r25, Y+38	; 0x26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	9e 8f       	std	Y+30, r25	; 0x1e
    193c:	8d 8f       	std	Y+29, r24	; 0x1d
    193e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <main_options+0x204>
    1946:	9e 8f       	std	Y+30, r25	; 0x1e
    1948:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		main_options();
    194a:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
    194e:	fd c0       	rjmp	.+506    	; 0x1b4a <main_options+0x40c>
	}
	else if(keypad_data == '-')
    1950:	89 ad       	ldd	r24, Y+57	; 0x39
    1952:	8d 32       	cpi	r24, 0x2D	; 45
    1954:	09 f0       	breq	.+2      	; 0x1958 <main_options+0x21a>
    1956:	77 c0       	rjmp	.+238    	; 0x1a46 <main_options+0x308>
	{
		change_pass_option();
    1958:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <change_pass_option>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	aa ef       	ldi	r26, 0xFA	; 250
    1962:	b3 e4       	ldi	r27, 0x43	; 67
    1964:	89 8f       	std	Y+25, r24	; 0x19
    1966:	9a 8f       	std	Y+26, r25	; 0x1a
    1968:	ab 8f       	std	Y+27, r26	; 0x1b
    196a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a ef       	ldi	r20, 0xFA	; 250
    197a:	54 e4       	ldi	r21, 0x44	; 68
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d 8b       	std	Y+21, r24	; 0x15
    1986:	9e 8b       	std	Y+22, r25	; 0x16
    1988:	af 8b       	std	Y+23, r26	; 0x17
    198a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <main_options+0x270>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <main_options+0x2ee>
	else if (__tmp > 65535)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <main_options+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <main_options+0x2d0>
    19f0:	88 ec       	ldi	r24, 0xC8	; 200
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <main_options+0x2be>
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <main_options+0x2b2>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <main_options+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	98 89       	ldd	r25, Y+16	; 0x10
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <main_options+0x2fa>
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		main_options();
    1a40:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
    1a44:	82 c0       	rjmp	.+260    	; 0x1b4a <main_options+0x40c>
	}
	else
	{
		LCD_clearScreen();
    1a46:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Wrong Option !");
    1a4a:	8e e7       	ldi	r24, 0x7E	; 126
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		LCD_goToRowColumn(1, 0);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("Try Again");
    1a5a:	8d e8       	ldi	r24, 0x8D	; 141
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	aa ef       	ldi	r26, 0xFA	; 250
    1a68:	b4 e4       	ldi	r27, 0x44	; 68
    1a6a:	8b 87       	std	Y+11, r24	; 0x0b
    1a6c:	9c 87       	std	Y+12, r25	; 0x0c
    1a6e:	ad 87       	std	Y+13, r26	; 0x0d
    1a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8f 83       	std	Y+7, r24	; 0x07
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	a9 87       	std	Y+9, r26	; 0x09
    1a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <main_options+0x376>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <main_options+0x3f4>
	else if (__tmp > 65535)
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <main_options+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <main_options+0x3d6>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <main_options+0x3c4>
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <main_options+0x3b8>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <main_options+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <main_options+0x400>
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		main_options();
    1b46:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
	}

}
    1b4a:	e9 96       	adiw	r28, 0x39	; 57
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <open_door_option>:

void open_door_option(void)
{
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	af 97       	sbiw	r28, 0x2f	; 47
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
	static uint8 count = 0;
	uint8 array_not_equal_flag = 0;
    1b74:	1f a6       	std	Y+47, r1	; 0x2f
	LCD_clearScreen();
    1b76:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("Enter Pass:");
    1b7a:	87 e9       	ldi	r24, 0x97	; 151
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    1b8a:	1e a6       	std	Y+46, r1	; 0x2e
    1b8c:	1d a6       	std	Y+45, r1	; 0x2d
    1b8e:	f4 c0       	rjmp	.+488    	; 0x1d78 <open_door_option+0x21c>
	{
		g_password_array_user[i]= KeyPad_getPressedKey();
    1b90:	0d a5       	ldd	r16, Y+45	; 0x2d
    1b92:	1e a5       	ldd	r17, Y+46	; 0x2e
    1b94:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	ee 5d       	subi	r30, 0xDE	; 222
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	80 83       	st	Z, r24
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	aa ef       	ldi	r26, 0xFA	; 250
    1ba6:	b3 e4       	ldi	r27, 0x43	; 67
    1ba8:	8f a3       	std	Y+39, r24	; 0x27
    1baa:	98 a7       	std	Y+40, r25	; 0x28
    1bac:	a9 a7       	std	Y+41, r26	; 0x29
    1bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8b a3       	std	Y+35, r24	; 0x23
    1bca:	9c a3       	std	Y+36, r25	; 0x24
    1bcc:	ad a3       	std	Y+37, r26	; 0x25
    1bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <open_door_option+0x96>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9a a3       	std	Y+34, r25	; 0x22
    1bee:	89 a3       	std	Y+33, r24	; 0x21
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <open_door_option+0x114>
	else if (__tmp > 65535)
    1bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <open_door_option+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9a a3       	std	Y+34, r25	; 0x22
    1c30:	89 a3       	std	Y+33, r24	; 0x21
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <open_door_option+0xf6>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	98 a3       	std	Y+32, r25	; 0x20
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <open_door_option+0xe4>
    1c44:	98 a3       	std	Y+32, r25	; 0x20
    1c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9a a3       	std	Y+34, r25	; 0x22
    1c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	89 a1       	ldd	r24, Y+33	; 0x21
    1c54:	9a a1       	ldd	r25, Y+34	; 0x22
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <open_door_option+0xd8>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <open_door_option+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c60:	8d a1       	ldd	r24, Y+37	; 0x25
    1c62:	9e a1       	ldd	r25, Y+38	; 0x26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	89 a1       	ldd	r24, Y+33	; 0x21
    1c72:	9a a1       	ldd	r25, Y+34	; 0x22
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d
    1c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <open_door_option+0x120>
    1c80:	9e 8f       	std	Y+30, r25	; 0x1e
    1c82:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
    1c84:	8a e2       	ldi	r24, 0x2A	; 42
    1c86:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a8 ec       	ldi	r26, 0xC8	; 200
    1c90:	b2 e4       	ldi	r27, 0x42	; 66
    1c92:	89 8f       	std	Y+25, r24	; 0x19
    1c94:	9a 8f       	std	Y+26, r25	; 0x1a
    1c96:	ab 8f       	std	Y+27, r26	; 0x1b
    1c98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a ef       	ldi	r20, 0xFA	; 250
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8d 8b       	std	Y+21, r24	; 0x15
    1cb4:	9e 8b       	std	Y+22, r25	; 0x16
    1cb6:	af 8b       	std	Y+23, r26	; 0x17
    1cb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cba:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <open_door_option+0x180>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <open_door_option+0x1fe>
	else if (__tmp > 65535)
    1cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cde:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <open_door_option+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9c 8b       	std	Y+20, r25	; 0x14
    1d1a:	8b 8b       	std	Y+19, r24	; 0x13
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <open_door_option+0x1e0>
    1d1e:	88 ec       	ldi	r24, 0xC8	; 200
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
    1d26:	89 89       	ldd	r24, Y+17	; 0x11
    1d28:	9a 89       	ldd	r25, Y+18	; 0x12
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <open_door_option+0x1ce>
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9c 8b       	std	Y+20, r25	; 0x14
    1d3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <open_door_option+0x1c2>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <open_door_option+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6d 89       	ldd	r22, Y+21	; 0x15
    1d48:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9c 8b       	std	Y+20, r25	; 0x14
    1d58:	8b 8b       	std	Y+19, r24	; 0x13
    1d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	98 89       	ldd	r25, Y+16	; 0x10
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <open_door_option+0x20a>
    1d6a:	98 8b       	std	Y+16, r25	; 0x10
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
	static uint8 count = 0;
	uint8 array_not_equal_flag = 0;
	LCD_clearScreen();
	LCD_displayString("Enter Pass:");
	LCD_goToRowColumn(1, 0);
	for(int i = 0 ; i < 5 ; i++)
    1d6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	9e a7       	std	Y+46, r25	; 0x2e
    1d76:	8d a7       	std	Y+45, r24	; 0x2d
    1d78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7c:	85 30       	cpi	r24, 0x05	; 5
    1d7e:	91 05       	cpc	r25, r1
    1d80:	0c f4       	brge	.+2      	; 0x1d84 <open_door_option+0x228>
    1d82:	06 cf       	rjmp	.-500    	; 0x1b90 <open_door_option+0x34>
		g_password_array_user[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    1d84:	1c a6       	std	Y+44, r1	; 0x2c
    1d86:	1b a6       	std	Y+43, r1	; 0x2b
    1d88:	15 c0       	rjmp	.+42     	; 0x1db4 <open_door_option+0x258>
	{
		if(g_password_array_user[i] != g_password_array[i])
    1d8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d8e:	fc 01       	movw	r30, r24
    1d90:	ee 5d       	subi	r30, 0xDE	; 222
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	20 81       	ld	r18, Z
    1d96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e8 5e       	subi	r30, 0xE8	; 232
    1d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1da0:	80 81       	ld	r24, Z
    1da2:	28 17       	cp	r18, r24
    1da4:	11 f0       	breq	.+4      	; 0x1daa <open_door_option+0x24e>
		{
			array_not_equal_flag = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
		g_password_array_user[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    1daa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	9c a7       	std	Y+44, r25	; 0x2c
    1db2:	8b a7       	std	Y+43, r24	; 0x2b
    1db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db8:	85 30       	cpi	r24, 0x05	; 5
    1dba:	91 05       	cpc	r25, r1
    1dbc:	34 f3       	brlt	.-52     	; 0x1d8a <open_door_option+0x22e>
		if(g_password_array_user[i] != g_password_array[i])
		{
			array_not_equal_flag = 1;
		}
	}
	if(array_not_equal_flag == 1)
    1dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <open_door_option+0x26a>
    1dc4:	9e c0       	rjmp	.+316    	; 0x1f02 <open_door_option+0x3a6>
	{
		count++;
    1dc6:	80 91 27 01 	lds	r24, 0x0127
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	80 93 27 01 	sts	0x0127, r24
		if(count == 3)
    1dd0:	80 91 27 01 	lds	r24, 0x0127
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	89 f4       	brne	.+34     	; 0x1dfa <open_door_option+0x29e>
		{
			LCD_clearScreen();
    1dd8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayString("     ERROR   ");
    1ddc:	83 ea       	ldi	r24, 0xA3	; 163
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			UART_sendByte(0x43); /* Send Command for Turning ON Buzzer */
    1de4:	83 e4       	ldi	r24, 0x43	; 67
    1de6:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
			while(UART_recieveByte() != BUZZER_FINISH_FLAG){} // wait until BUZZER flag is ready
    1dea:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    1dee:	88 3f       	cpi	r24, 0xF8	; 248
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <open_door_option+0x28e>
			count = 0;
    1df2:	10 92 27 01 	sts	0x0127, r1
			/* Back to main Options */
			main_options();
    1df6:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
		}
		LCD_clearScreen();
    1dfa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Wrong Pass.");
    1dfe:	81 eb       	ldi	r24, 0xB1	; 177
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		LCD_goToRowColumn(1, 0);
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("Try Again");
    1e0e:	8d e8       	ldi	r24, 0x8D	; 141
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		array_not_equal_flag = 0;
    1e16:	1f a6       	std	Y+47, r1	; 0x2f
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	aa e7       	ldi	r26, 0x7A	; 122
    1e1e:	b4 e4       	ldi	r27, 0x44	; 68
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a9 87       	std	Y+9, r26	; 0x09
    1e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <open_door_option+0x30e>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <open_door_option+0x38c>
	else if (__tmp > 65535)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <open_door_option+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <open_door_option+0x36e>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <open_door_option+0x35c>
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <open_door_option+0x350>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <open_door_option+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <open_door_option+0x398>
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		open_door_option();
    1efc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <open_door_option>
    1f00:	11 c0       	rjmp	.+34     	; 0x1f24 <open_door_option+0x3c8>
	}
	else
	{
		LCD_clearScreen();
    1f02:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Right Password !");
    1f06:	8d eb       	ldi	r24, 0xBD	; 189
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		UART_sendByte(COMMAND_5); /* Send Command for Turning ON Buzzer */
    1f0e:	84 e4       	ldi	r24, 0x44	; 68
    1f10:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
		while(UART_recieveByte() != MOTOR_FINISH_FLAG){} // wait until MC2 is ready
    1f14:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    1f18:	89 3f       	cpi	r24, 0xF9	; 249
    1f1a:	e1 f7       	brne	.-8      	; 0x1f14 <open_door_option+0x3b8>
		count=0;
    1f1c:	10 92 27 01 	sts	0x0127, r1
		/* Back to main Options */
		main_options();
    1f20:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
	}

}
    1f24:	af 96       	adiw	r28, 0x2f	; 47
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <change_pass_option>:
void change_pass_option(void)
{
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	ed 97       	sbiw	r28, 0x3d	; 61
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
	static uint8 count = 0;
	uint8 array_not_equal_flag = 0;
    1f52:	1d ae       	std	Y+61, r1	; 0x3d
	LCD_clearScreen();
    1f54:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("Enter old Pass:");
    1f58:	8e ec       	ldi	r24, 0xCE	; 206
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    1f68:	1c ae       	std	Y+60, r1	; 0x3c
    1f6a:	1b ae       	std	Y+59, r1	; 0x3b
    1f6c:	f4 c0       	rjmp	.+488    	; 0x2156 <change_pass_option+0x21c>
	{
		g_password_array_user[i]= KeyPad_getPressedKey();
    1f6e:	0b ad       	ldd	r16, Y+59	; 0x3b
    1f70:	1c ad       	ldd	r17, Y+60	; 0x3c
    1f72:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1f76:	f8 01       	movw	r30, r16
    1f78:	ee 5d       	subi	r30, 0xDE	; 222
    1f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7c:	80 83       	st	Z, r24
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	aa ef       	ldi	r26, 0xFA	; 250
    1f84:	b3 e4       	ldi	r27, 0x43	; 67
    1f86:	8d ab       	std	Y+53, r24	; 0x35
    1f88:	9e ab       	std	Y+54, r25	; 0x36
    1f8a:	af ab       	std	Y+55, r26	; 0x37
    1f8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f90:	7e a9       	ldd	r23, Y+54	; 0x36
    1f92:	8f a9       	ldd	r24, Y+55	; 0x37
    1f94:	98 ad       	ldd	r25, Y+56	; 0x38
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a ef       	ldi	r20, 0xFA	; 250
    1f9c:	54 e4       	ldi	r21, 0x44	; 68
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	89 ab       	std	Y+49, r24	; 0x31
    1fa8:	9a ab       	std	Y+50, r25	; 0x32
    1faa:	ab ab       	std	Y+51, r26	; 0x33
    1fac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <change_pass_option+0x96>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	98 ab       	std	Y+48, r25	; 0x30
    1fcc:	8f a7       	std	Y+47, r24	; 0x2f
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <change_pass_option+0x114>
	else if (__tmp > 65535)
    1fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <change_pass_option+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6d a9       	ldd	r22, Y+53	; 0x35
    1fea:	7e a9       	ldd	r23, Y+54	; 0x36
    1fec:	8f a9       	ldd	r24, Y+55	; 0x37
    1fee:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	98 ab       	std	Y+48, r25	; 0x30
    200e:	8f a7       	std	Y+47, r24	; 0x2f
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <change_pass_option+0xf6>
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9e a7       	std	Y+46, r25	; 0x2e
    2018:	8d a7       	std	Y+45, r24	; 0x2d
    201a:	8d a5       	ldd	r24, Y+45	; 0x2d
    201c:	9e a5       	ldd	r25, Y+46	; 0x2e
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <change_pass_option+0xe4>
    2022:	9e a7       	std	Y+46, r25	; 0x2e
    2024:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8f a5       	ldd	r24, Y+47	; 0x2f
    2028:	98 a9       	ldd	r25, Y+48	; 0x30
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <change_pass_option+0xd8>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <change_pass_option+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	69 a9       	ldd	r22, Y+49	; 0x31
    203c:	7a a9       	ldd	r23, Y+50	; 0x32
    203e:	8b a9       	ldd	r24, Y+51	; 0x33
    2040:	9c a9       	ldd	r25, Y+52	; 0x34
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	9c a7       	std	Y+44, r25	; 0x2c
    2054:	8b a7       	std	Y+43, r24	; 0x2b
    2056:	8b a5       	ldd	r24, Y+43	; 0x2b
    2058:	9c a5       	ldd	r25, Y+44	; 0x2c
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <change_pass_option+0x120>
    205e:	9c a7       	std	Y+44, r25	; 0x2c
    2060:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
    2062:	8a e2       	ldi	r24, 0x2A	; 42
    2064:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a8 ec       	ldi	r26, 0xC8	; 200
    206e:	b2 e4       	ldi	r27, 0x42	; 66
    2070:	8f a3       	std	Y+39, r24	; 0x27
    2072:	98 a7       	std	Y+40, r25	; 0x28
    2074:	a9 a7       	std	Y+41, r26	; 0x29
    2076:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6f a1       	ldd	r22, Y+39	; 0x27
    207a:	78 a5       	ldd	r23, Y+40	; 0x28
    207c:	89 a5       	ldd	r24, Y+41	; 0x29
    207e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8b a3       	std	Y+35, r24	; 0x23
    2092:	9c a3       	std	Y+36, r25	; 0x24
    2094:	ad a3       	std	Y+37, r26	; 0x25
    2096:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2098:	6b a1       	ldd	r22, Y+35	; 0x23
    209a:	7c a1       	ldd	r23, Y+36	; 0x24
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <change_pass_option+0x180>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <change_pass_option+0x1fe>
	else if (__tmp > 65535)
    20ba:	6b a1       	ldd	r22, Y+35	; 0x23
    20bc:	7c a1       	ldd	r23, Y+36	; 0x24
    20be:	8d a1       	ldd	r24, Y+37	; 0x25
    20c0:	9e a1       	ldd	r25, Y+38	; 0x26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <change_pass_option+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6f a1       	ldd	r22, Y+39	; 0x27
    20d4:	78 a5       	ldd	r23, Y+40	; 0x28
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <change_pass_option+0x1e0>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	98 a3       	std	Y+32, r25	; 0x20
    2102:	8f 8f       	std	Y+31, r24	; 0x1f
    2104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2106:	98 a1       	ldd	r25, Y+32	; 0x20
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <change_pass_option+0x1ce>
    210c:	98 a3       	std	Y+32, r25	; 0x20
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <change_pass_option+0x1c2>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <change_pass_option+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9a a3       	std	Y+34, r25	; 0x22
    2136:	89 a3       	std	Y+33, r24	; 0x21
    2138:	89 a1       	ldd	r24, Y+33	; 0x21
    213a:	9a a1       	ldd	r25, Y+34	; 0x22
    213c:	9e 8f       	std	Y+30, r25	; 0x1e
    213e:	8d 8f       	std	Y+29, r24	; 0x1d
    2140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2142:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <change_pass_option+0x20a>
    2148:	9e 8f       	std	Y+30, r25	; 0x1e
    214a:	8d 8f       	std	Y+29, r24	; 0x1d
	static uint8 count = 0;
	uint8 array_not_equal_flag = 0;
	LCD_clearScreen();
	LCD_displayString("Enter old Pass:");
	LCD_goToRowColumn(1, 0);
	for(int i = 0 ; i < 5 ; i++)
    214c:	8b ad       	ldd	r24, Y+59	; 0x3b
    214e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	9c af       	std	Y+60, r25	; 0x3c
    2154:	8b af       	std	Y+59, r24	; 0x3b
    2156:	8b ad       	ldd	r24, Y+59	; 0x3b
    2158:	9c ad       	ldd	r25, Y+60	; 0x3c
    215a:	85 30       	cpi	r24, 0x05	; 5
    215c:	91 05       	cpc	r25, r1
    215e:	0c f4       	brge	.+2      	; 0x2162 <change_pass_option+0x228>
    2160:	06 cf       	rjmp	.-500    	; 0x1f6e <change_pass_option+0x34>
		g_password_array_user[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    2162:	1a ae       	std	Y+58, r1	; 0x3a
    2164:	19 ae       	std	Y+57, r1	; 0x39
    2166:	15 c0       	rjmp	.+42     	; 0x2192 <change_pass_option+0x258>
	{
		if(g_password_array_user[i] != g_password_array[i])
    2168:	89 ad       	ldd	r24, Y+57	; 0x39
    216a:	9a ad       	ldd	r25, Y+58	; 0x3a
    216c:	fc 01       	movw	r30, r24
    216e:	ee 5d       	subi	r30, 0xDE	; 222
    2170:	fe 4f       	sbci	r31, 0xFE	; 254
    2172:	20 81       	ld	r18, Z
    2174:	89 ad       	ldd	r24, Y+57	; 0x39
    2176:	9a ad       	ldd	r25, Y+58	; 0x3a
    2178:	fc 01       	movw	r30, r24
    217a:	e8 5e       	subi	r30, 0xE8	; 232
    217c:	fe 4f       	sbci	r31, 0xFE	; 254
    217e:	80 81       	ld	r24, Z
    2180:	28 17       	cp	r18, r24
    2182:	11 f0       	breq	.+4      	; 0x2188 <change_pass_option+0x24e>
		{
			array_not_equal_flag = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8d af       	std	Y+61, r24	; 0x3d
		g_password_array_user[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    2188:	89 ad       	ldd	r24, Y+57	; 0x39
    218a:	9a ad       	ldd	r25, Y+58	; 0x3a
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	9a af       	std	Y+58, r25	; 0x3a
    2190:	89 af       	std	Y+57, r24	; 0x39
    2192:	89 ad       	ldd	r24, Y+57	; 0x39
    2194:	9a ad       	ldd	r25, Y+58	; 0x3a
    2196:	85 30       	cpi	r24, 0x05	; 5
    2198:	91 05       	cpc	r25, r1
    219a:	34 f3       	brlt	.-52     	; 0x2168 <change_pass_option+0x22e>
		if(g_password_array_user[i] != g_password_array[i])
		{
			array_not_equal_flag = 1;
		}
	}
	if(array_not_equal_flag == 1)
    219c:	8d ad       	ldd	r24, Y+61	; 0x3d
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <change_pass_option+0x26a>
    21a2:	9e c0       	rjmp	.+316    	; 0x22e0 <change_pass_option+0x3a6>
	{
		count++;
    21a4:	80 91 28 01 	lds	r24, 0x0128
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	80 93 28 01 	sts	0x0128, r24
		if(count == 3)
    21ae:	80 91 28 01 	lds	r24, 0x0128
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	89 f4       	brne	.+34     	; 0x21d8 <change_pass_option+0x29e>
		{
			LCD_clearScreen();
    21b6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayString("     ERROR   ");
    21ba:	83 ea       	ldi	r24, 0xA3	; 163
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			UART_sendByte(0x43); /* Send Command for Turning ON Buzzer */
    21c2:	83 e4       	ldi	r24, 0x43	; 67
    21c4:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
			while(UART_recieveByte() != BUZZER_FINISH_FLAG){} // wait until BUZZER flag is ready
    21c8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    21cc:	88 3f       	cpi	r24, 0xF8	; 248
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <change_pass_option+0x28e>
			count = 0;
    21d0:	10 92 28 01 	sts	0x0128, r1
			/* Back to main Options */
			main_options();
    21d4:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
		}
		LCD_clearScreen();
    21d8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Wrong Pass.");
    21dc:	81 eb       	ldi	r24, 0xB1	; 177
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		LCD_goToRowColumn(1, 0);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("Try Again");
    21ec:	8d e8       	ldi	r24, 0x8D	; 141
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		array_not_equal_flag = 0;
    21f4:	1d ae       	std	Y+61, r1	; 0x3d
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	aa e7       	ldi	r26, 0x7A	; 122
    21fc:	b4 e4       	ldi	r27, 0x44	; 68
    21fe:	89 8f       	std	Y+25, r24	; 0x19
    2200:	9a 8f       	std	Y+26, r25	; 0x1a
    2202:	ab 8f       	std	Y+27, r26	; 0x1b
    2204:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	69 8d       	ldd	r22, Y+25	; 0x19
    2208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8d 8b       	std	Y+21, r24	; 0x15
    2220:	9e 8b       	std	Y+22, r25	; 0x16
    2222:	af 8b       	std	Y+23, r26	; 0x17
    2224:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2226:	6d 89       	ldd	r22, Y+21	; 0x15
    2228:	7e 89       	ldd	r23, Y+22	; 0x16
    222a:	8f 89       	ldd	r24, Y+23	; 0x17
    222c:	98 8d       	ldd	r25, Y+24	; 0x18
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <change_pass_option+0x30e>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9c 8b       	std	Y+20, r25	; 0x14
    2244:	8b 8b       	std	Y+19, r24	; 0x13
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <change_pass_option+0x38c>
	else if (__tmp > 65535)
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <change_pass_option+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	69 8d       	ldd	r22, Y+25	; 0x19
    2262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <change_pass_option+0x36e>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9a 8b       	std	Y+18, r25	; 0x12
    2290:	89 8b       	std	Y+17, r24	; 0x11
    2292:	89 89       	ldd	r24, Y+17	; 0x11
    2294:	9a 89       	ldd	r25, Y+18	; 0x12
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <change_pass_option+0x35c>
    229a:	9a 8b       	std	Y+18, r25	; 0x12
    229c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8b 89       	ldd	r24, Y+19	; 0x13
    22a0:	9c 89       	ldd	r25, Y+20	; 0x14
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <change_pass_option+0x350>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <change_pass_option+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	98 8b       	std	Y+16, r25	; 0x10
    22cc:	8f 87       	std	Y+15, r24	; 0x0f
    22ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d0:	98 89       	ldd	r25, Y+16	; 0x10
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <change_pass_option+0x398>
    22d6:	98 8b       	std	Y+16, r25	; 0x10
    22d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		change_pass_option();
    22da:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <change_pass_option>
    22de:	7c c0       	rjmp	.+248    	; 0x23d8 <change_pass_option+0x49e>
	}
	else
	{
		LCD_clearScreen();
    22e0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Right Password !");
    22e4:	8d eb       	ldi	r24, 0xBD	; 189
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	aa e7       	ldi	r26, 0x7A	; 122
    22f2:	b4 e4       	ldi	r27, 0x44	; 68
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <change_pass_option+0x404>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <change_pass_option+0x482>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <change_pass_option+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <change_pass_option+0x464>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <change_pass_option+0x452>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <change_pass_option+0x446>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <change_pass_option+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <change_pass_option+0x48e>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		write_first_time();
    23d0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <write_first_time>
		/* Back to main Options */
		main_options();
    23d4:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
	}
}
    23d8:	ed 96       	adiw	r28, 0x3d	; 61
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <write_first_time>:
void write_first_time(void)
{
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	cf 54       	subi	r28, 0x4F	; 79
    23fc:	d0 40       	sbci	r29, 0x00	; 0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2408:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("Enter Pass:");
    240c:	87 e9       	ldi	r24, 0x97	; 151
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	uint8 array_not_equal_flag = 0;
    2414:	fe 01       	movw	r30, r28
    2416:	e1 5b       	subi	r30, 0xB1	; 177
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	10 82       	st	Z, r1
	LCD_goToRowColumn(1, 0);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    2424:	fe 01       	movw	r30, r28
    2426:	e3 5b       	subi	r30, 0xB3	; 179
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	11 82       	std	Z+1, r1	; 0x01
    242c:	10 82       	st	Z, r1
    242e:	11 c1       	rjmp	.+546    	; 0x2652 <write_first_time+0x264>
	{
		g_password_array[i]= KeyPad_getPressedKey();
    2430:	fe 01       	movw	r30, r28
    2432:	e3 5b       	subi	r30, 0xB3	; 179
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	00 81       	ld	r16, Z
    2438:	11 81       	ldd	r17, Z+1	; 0x01
    243a:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    243e:	f8 01       	movw	r30, r16
    2440:	e8 5e       	subi	r30, 0xE8	; 232
    2442:	fe 4f       	sbci	r31, 0xFE	; 254
    2444:	80 83       	st	Z, r24
    2446:	fe 01       	movw	r30, r28
    2448:	ed 5b       	subi	r30, 0xBD	; 189
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	aa ef       	ldi	r26, 0xFA	; 250
    2452:	b3 e4       	ldi	r27, 0x43	; 67
    2454:	80 83       	st	Z, r24
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	a2 83       	std	Z+2, r26	; 0x02
    245a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	8e 01       	movw	r16, r28
    245e:	01 5c       	subi	r16, 0xC1	; 193
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	ed 5b       	subi	r30, 0xBD	; 189
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a ef       	ldi	r20, 0xFA	; 250
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	f8 01       	movw	r30, r16
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    248a:	fe 01       	movw	r30, r28
    248c:	ff 96       	adiw	r30, 0x3f	; 63
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <write_first_time+0xc2>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e af       	std	Y+62, r25	; 0x3e
    24ac:	8d af       	std	Y+61, r24	; 0x3d
    24ae:	46 c0       	rjmp	.+140    	; 0x253c <write_first_time+0x14e>
	else if (__tmp > 65535)
    24b0:	fe 01       	movw	r30, r28
    24b2:	ff 96       	adiw	r30, 0x3f	; 63
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	64 f5       	brge	.+88     	; 0x2524 <write_first_time+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	fe 01       	movw	r30, r28
    24ce:	ed 5b       	subi	r30, 0xBD	; 189
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e af       	std	Y+62, r25	; 0x3e
    24f8:	8d af       	std	Y+61, r24	; 0x3d
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <write_first_time+0x12c>
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9c af       	std	Y+60, r25	; 0x3c
    2502:	8b af       	std	Y+59, r24	; 0x3b
    2504:	8b ad       	ldd	r24, Y+59	; 0x3b
    2506:	9c ad       	ldd	r25, Y+60	; 0x3c
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <write_first_time+0x11a>
    250c:	9c af       	std	Y+60, r25	; 0x3c
    250e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8d ad       	ldd	r24, Y+61	; 0x3d
    2512:	9e ad       	ldd	r25, Y+62	; 0x3e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9e af       	std	Y+62, r25	; 0x3e
    2518:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8d ad       	ldd	r24, Y+61	; 0x3d
    251c:	9e ad       	ldd	r25, Y+62	; 0x3e
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <write_first_time+0x10e>
    2522:	16 c0       	rjmp	.+44     	; 0x2550 <write_first_time+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	fe 01       	movw	r30, r28
    2526:	ff 96       	adiw	r30, 0x3f	; 63
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e af       	std	Y+62, r25	; 0x3e
    253a:	8d af       	std	Y+61, r24	; 0x3d
    253c:	8d ad       	ldd	r24, Y+61	; 0x3d
    253e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2540:	9a af       	std	Y+58, r25	; 0x3a
    2542:	89 af       	std	Y+57, r24	; 0x39
    2544:	89 ad       	ldd	r24, Y+57	; 0x39
    2546:	9a ad       	ldd	r25, Y+58	; 0x3a
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <write_first_time+0x15a>
    254c:	9a af       	std	Y+58, r25	; 0x3a
    254e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
    2550:	8a e2       	ldi	r24, 0x2A	; 42
    2552:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a8 ec       	ldi	r26, 0xC8	; 200
    255c:	b2 e4       	ldi	r27, 0x42	; 66
    255e:	8d ab       	std	Y+53, r24	; 0x35
    2560:	9e ab       	std	Y+54, r25	; 0x36
    2562:	af ab       	std	Y+55, r26	; 0x37
    2564:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2566:	6d a9       	ldd	r22, Y+53	; 0x35
    2568:	7e a9       	ldd	r23, Y+54	; 0x36
    256a:	8f a9       	ldd	r24, Y+55	; 0x37
    256c:	98 ad       	ldd	r25, Y+56	; 0x38
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a ef       	ldi	r20, 0xFA	; 250
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	89 ab       	std	Y+49, r24	; 0x31
    2580:	9a ab       	std	Y+50, r25	; 0x32
    2582:	ab ab       	std	Y+51, r26	; 0x33
    2584:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2586:	69 a9       	ldd	r22, Y+49	; 0x31
    2588:	7a a9       	ldd	r23, Y+50	; 0x32
    258a:	8b a9       	ldd	r24, Y+51	; 0x33
    258c:	9c a9       	ldd	r25, Y+52	; 0x34
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	2c f4       	brge	.+10     	; 0x25a8 <write_first_time+0x1ba>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	98 ab       	std	Y+48, r25	; 0x30
    25a4:	8f a7       	std	Y+47, r24	; 0x2f
    25a6:	3f c0       	rjmp	.+126    	; 0x2626 <write_first_time+0x238>
	else if (__tmp > 65535)
    25a8:	69 a9       	ldd	r22, Y+49	; 0x31
    25aa:	7a a9       	ldd	r23, Y+50	; 0x32
    25ac:	8b a9       	ldd	r24, Y+51	; 0x33
    25ae:	9c a9       	ldd	r25, Y+52	; 0x34
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	4c f5       	brge	.+82     	; 0x2612 <write_first_time+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	6d a9       	ldd	r22, Y+53	; 0x35
    25c2:	7e a9       	ldd	r23, Y+54	; 0x36
    25c4:	8f a9       	ldd	r24, Y+55	; 0x37
    25c6:	98 ad       	ldd	r25, Y+56	; 0x38
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	98 ab       	std	Y+48, r25	; 0x30
    25e6:	8f a7       	std	Y+47, r24	; 0x2f
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <write_first_time+0x21a>
    25ea:	88 ec       	ldi	r24, 0xC8	; 200
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9e a7       	std	Y+46, r25	; 0x2e
    25f0:	8d a7       	std	Y+45, r24	; 0x2d
    25f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <write_first_time+0x208>
    25fa:	9e a7       	std	Y+46, r25	; 0x2e
    25fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2600:	98 a9       	ldd	r25, Y+48	; 0x30
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	98 ab       	std	Y+48, r25	; 0x30
    2606:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	8f a5       	ldd	r24, Y+47	; 0x2f
    260a:	98 a9       	ldd	r25, Y+48	; 0x30
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f7       	brne	.-38     	; 0x25ea <write_first_time+0x1fc>
    2610:	14 c0       	rjmp	.+40     	; 0x263a <write_first_time+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2612:	69 a9       	ldd	r22, Y+49	; 0x31
    2614:	7a a9       	ldd	r23, Y+50	; 0x32
    2616:	8b a9       	ldd	r24, Y+51	; 0x33
    2618:	9c a9       	ldd	r25, Y+52	; 0x34
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
    2626:	8f a5       	ldd	r24, Y+47	; 0x2f
    2628:	98 a9       	ldd	r25, Y+48	; 0x30
    262a:	9c a7       	std	Y+44, r25	; 0x2c
    262c:	8b a7       	std	Y+43, r24	; 0x2b
    262e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2630:	9c a5       	ldd	r25, Y+44	; 0x2c
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <write_first_time+0x244>
    2636:	9c a7       	std	Y+44, r25	; 0x2c
    2638:	8b a7       	std	Y+43, r24	; 0x2b
{
	LCD_clearScreen();
	LCD_displayString("Enter Pass:");
	uint8 array_not_equal_flag = 0;
	LCD_goToRowColumn(1, 0);
	for(int i = 0 ; i < 5 ; i++)
    263a:	de 01       	movw	r26, r28
    263c:	a3 5b       	subi	r26, 0xB3	; 179
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	e3 5b       	subi	r30, 0xB3	; 179
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	9c 93       	st	X, r25
    2650:	8e 93       	st	-X, r24
    2652:	fe 01       	movw	r30, r28
    2654:	e3 5b       	subi	r30, 0xB3	; 179
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	85 30       	cpi	r24, 0x05	; 5
    265e:	91 05       	cpc	r25, r1
    2660:	0c f4       	brge	.+2      	; 0x2664 <write_first_time+0x276>
    2662:	e6 ce       	rjmp	.-564    	; 0x2430 <write_first_time+0x42>
		g_password_array[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	LCD_clearScreen();
    2664:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("Enter same Pass:");
    2668:	8e ed       	ldi	r24, 0xDE	; 222
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    2678:	fe 01       	movw	r30, r28
    267a:	e5 5b       	subi	r30, 0xB5	; 181
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	11 82       	std	Z+1, r1	; 0x01
    2680:	10 82       	st	Z, r1
    2682:	fe c0       	rjmp	.+508    	; 0x2880 <write_first_time+0x492>
	{
		g_password_array_again[i]= KeyPad_getPressedKey();
    2684:	fe 01       	movw	r30, r28
    2686:	e5 5b       	subi	r30, 0xB5	; 181
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	00 81       	ld	r16, Z
    268c:	11 81       	ldd	r17, Z+1	; 0x01
    268e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2692:	f8 01       	movw	r30, r16
    2694:	e3 5e       	subi	r30, 0xE3	; 227
    2696:	fe 4f       	sbci	r31, 0xFE	; 254
    2698:	80 83       	st	Z, r24
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	aa ef       	ldi	r26, 0xFA	; 250
    26a0:	b3 e4       	ldi	r27, 0x43	; 67
    26a2:	8f a3       	std	Y+39, r24	; 0x27
    26a4:	98 a7       	std	Y+40, r25	; 0x28
    26a6:	a9 a7       	std	Y+41, r26	; 0x29
    26a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26aa:	6f a1       	ldd	r22, Y+39	; 0x27
    26ac:	78 a5       	ldd	r23, Y+40	; 0x28
    26ae:	89 a5       	ldd	r24, Y+41	; 0x29
    26b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a ef       	ldi	r20, 0xFA	; 250
    26b8:	54 e4       	ldi	r21, 0x44	; 68
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	8b a3       	std	Y+35, r24	; 0x23
    26c4:	9c a3       	std	Y+36, r25	; 0x24
    26c6:	ad a3       	std	Y+37, r26	; 0x25
    26c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ca:	6b a1       	ldd	r22, Y+35	; 0x23
    26cc:	7c a1       	ldd	r23, Y+36	; 0x24
    26ce:	8d a1       	ldd	r24, Y+37	; 0x25
    26d0:	9e a1       	ldd	r25, Y+38	; 0x26
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	2c f4       	brge	.+10     	; 0x26ec <write_first_time+0x2fe>
		__ticks = 1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9a a3       	std	Y+34, r25	; 0x22
    26e8:	89 a3       	std	Y+33, r24	; 0x21
    26ea:	3f c0       	rjmp	.+126    	; 0x276a <write_first_time+0x37c>
	else if (__tmp > 65535)
    26ec:	6b a1       	ldd	r22, Y+35	; 0x23
    26ee:	7c a1       	ldd	r23, Y+36	; 0x24
    26f0:	8d a1       	ldd	r24, Y+37	; 0x25
    26f2:	9e a1       	ldd	r25, Y+38	; 0x26
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	4c f5       	brge	.+82     	; 0x2756 <write_first_time+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2704:	6f a1       	ldd	r22, Y+39	; 0x27
    2706:	78 a5       	ldd	r23, Y+40	; 0x28
    2708:	89 a5       	ldd	r24, Y+41	; 0x29
    270a:	9a a5       	ldd	r25, Y+42	; 0x2a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	51 e4       	ldi	r21, 0x41	; 65
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9a a3       	std	Y+34, r25	; 0x22
    272a:	89 a3       	std	Y+33, r24	; 0x21
    272c:	0f c0       	rjmp	.+30     	; 0x274c <write_first_time+0x35e>
    272e:	88 ec       	ldi	r24, 0xC8	; 200
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	98 a3       	std	Y+32, r25	; 0x20
    2734:	8f 8f       	std	Y+31, r24	; 0x1f
    2736:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2738:	98 a1       	ldd	r25, Y+32	; 0x20
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <write_first_time+0x34c>
    273e:	98 a3       	std	Y+32, r25	; 0x20
    2740:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9a a3       	std	Y+34, r25	; 0x22
    274a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274c:	89 a1       	ldd	r24, Y+33	; 0x21
    274e:	9a a1       	ldd	r25, Y+34	; 0x22
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f7       	brne	.-38     	; 0x272e <write_first_time+0x340>
    2754:	14 c0       	rjmp	.+40     	; 0x277e <write_first_time+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	6b a1       	ldd	r22, Y+35	; 0x23
    2758:	7c a1       	ldd	r23, Y+36	; 0x24
    275a:	8d a1       	ldd	r24, Y+37	; 0x25
    275c:	9e a1       	ldd	r25, Y+38	; 0x26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9a a3       	std	Y+34, r25	; 0x22
    2768:	89 a3       	std	Y+33, r24	; 0x21
    276a:	89 a1       	ldd	r24, Y+33	; 0x21
    276c:	9a a1       	ldd	r25, Y+34	; 0x22
    276e:	9e 8f       	std	Y+30, r25	; 0x1e
    2770:	8d 8f       	std	Y+29, r24	; 0x1d
    2772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2774:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <write_first_time+0x388>
    277a:	9e 8f       	std	Y+30, r25	; 0x1e
    277c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
    277e:	8a e2       	ldi	r24, 0x2A	; 42
    2780:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a8 ec       	ldi	r26, 0xC8	; 200
    278a:	b2 e4       	ldi	r27, 0x42	; 66
    278c:	89 8f       	std	Y+25, r24	; 0x19
    278e:	9a 8f       	std	Y+26, r25	; 0x1a
    2790:	ab 8f       	std	Y+27, r26	; 0x1b
    2792:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2794:	69 8d       	ldd	r22, Y+25	; 0x19
    2796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a ef       	ldi	r20, 0xFA	; 250
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8d 8b       	std	Y+21, r24	; 0x15
    27ae:	9e 8b       	std	Y+22, r25	; 0x16
    27b0:	af 8b       	std	Y+23, r26	; 0x17
    27b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b4:	6d 89       	ldd	r22, Y+21	; 0x15
    27b6:	7e 89       	ldd	r23, Y+22	; 0x16
    27b8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ba:	98 8d       	ldd	r25, Y+24	; 0x18
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <write_first_time+0x3e8>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9c 8b       	std	Y+20, r25	; 0x14
    27d2:	8b 8b       	std	Y+19, r24	; 0x13
    27d4:	3f c0       	rjmp	.+126    	; 0x2854 <write_first_time+0x466>
	else if (__tmp > 65535)
    27d6:	6d 89       	ldd	r22, Y+21	; 0x15
    27d8:	7e 89       	ldd	r23, Y+22	; 0x16
    27da:	8f 89       	ldd	r24, Y+23	; 0x17
    27dc:	98 8d       	ldd	r25, Y+24	; 0x18
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	4c f5       	brge	.+82     	; 0x2840 <write_first_time+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	69 8d       	ldd	r22, Y+25	; 0x19
    27f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <write_first_time+0x448>
    2818:	88 ec       	ldi	r24, 0xC8	; 200
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9a 8b       	std	Y+18, r25	; 0x12
    281e:	89 8b       	std	Y+17, r24	; 0x11
    2820:	89 89       	ldd	r24, Y+17	; 0x11
    2822:	9a 89       	ldd	r25, Y+18	; 0x12
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <write_first_time+0x436>
    2828:	9a 8b       	std	Y+18, r25	; 0x12
    282a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9c 8b       	std	Y+20, r25	; 0x14
    2834:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	8b 89       	ldd	r24, Y+19	; 0x13
    2838:	9c 89       	ldd	r25, Y+20	; 0x14
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f7       	brne	.-38     	; 0x2818 <write_first_time+0x42a>
    283e:	14 c0       	rjmp	.+40     	; 0x2868 <write_first_time+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9c 8b       	std	Y+20, r25	; 0x14
    2852:	8b 8b       	std	Y+19, r24	; 0x13
    2854:	8b 89       	ldd	r24, Y+19	; 0x13
    2856:	9c 89       	ldd	r25, Y+20	; 0x14
    2858:	98 8b       	std	Y+16, r25	; 0x10
    285a:	8f 87       	std	Y+15, r24	; 0x0f
    285c:	8f 85       	ldd	r24, Y+15	; 0x0f
    285e:	98 89       	ldd	r25, Y+16	; 0x10
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <write_first_time+0x472>
    2864:	98 8b       	std	Y+16, r25	; 0x10
    2866:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
	}
	LCD_clearScreen();
	LCD_displayString("Enter same Pass:");
	LCD_goToRowColumn(1, 0);
	for(int i = 0 ; i < 5 ; i++)
    2868:	de 01       	movw	r26, r28
    286a:	a5 5b       	subi	r26, 0xB5	; 181
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	e5 5b       	subi	r30, 0xB5	; 181
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	11 96       	adiw	r26, 0x01	; 1
    287c:	9c 93       	st	X, r25
    287e:	8e 93       	st	-X, r24
    2880:	fe 01       	movw	r30, r28
    2882:	e5 5b       	subi	r30, 0xB5	; 181
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	85 30       	cpi	r24, 0x05	; 5
    288c:	91 05       	cpc	r25, r1
    288e:	0c f4       	brge	.+2      	; 0x2892 <write_first_time+0x4a4>
    2890:	f9 ce       	rjmp	.-526    	; 0x2684 <write_first_time+0x296>
		g_password_array_again[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    2892:	fe 01       	movw	r30, r28
    2894:	e7 5b       	subi	r30, 0xB7	; 183
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	11 82       	std	Z+1, r1	; 0x01
    289a:	10 82       	st	Z, r1
    289c:	25 c0       	rjmp	.+74     	; 0x28e8 <write_first_time+0x4fa>
	{
		if(g_password_array[i] != g_password_array_again[i])
    289e:	fe 01       	movw	r30, r28
    28a0:	e7 5b       	subi	r30, 0xB7	; 183
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	fc 01       	movw	r30, r24
    28aa:	e8 5e       	subi	r30, 0xE8	; 232
    28ac:	fe 4f       	sbci	r31, 0xFE	; 254
    28ae:	20 81       	ld	r18, Z
    28b0:	fe 01       	movw	r30, r28
    28b2:	e7 5b       	subi	r30, 0xB7	; 183
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	fc 01       	movw	r30, r24
    28bc:	e3 5e       	subi	r30, 0xE3	; 227
    28be:	fe 4f       	sbci	r31, 0xFE	; 254
    28c0:	80 81       	ld	r24, Z
    28c2:	28 17       	cp	r18, r24
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <write_first_time+0x4e2>
		{
			array_not_equal_flag = 1;
    28c6:	fe 01       	movw	r30, r28
    28c8:	e1 5b       	subi	r30, 0xB1	; 177
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	80 83       	st	Z, r24
		g_password_array_again[i]= KeyPad_getPressedKey();
		_delay_ms(500); /* Press time */
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	for(int i = 0 ; i < 5 ; i++)
    28d0:	de 01       	movw	r26, r28
    28d2:	a7 5b       	subi	r26, 0xB7	; 183
    28d4:	bf 4f       	sbci	r27, 0xFF	; 255
    28d6:	fe 01       	movw	r30, r28
    28d8:	e7 5b       	subi	r30, 0xB7	; 183
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	11 96       	adiw	r26, 0x01	; 1
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	fe 01       	movw	r30, r28
    28ea:	e7 5b       	subi	r30, 0xB7	; 183
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	85 30       	cpi	r24, 0x05	; 5
    28f4:	91 05       	cpc	r25, r1
    28f6:	9c f2       	brlt	.-90     	; 0x289e <write_first_time+0x4b0>
		if(g_password_array[i] != g_password_array_again[i])
		{
			array_not_equal_flag = 1;
		}
	}
	if(array_not_equal_flag == 1)
    28f8:	fe 01       	movw	r30, r28
    28fa:	e1 5b       	subi	r30, 0xB1	; 177
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	39 f4       	brne	.+14     	; 0x2912 <write_first_time+0x524>
	{
		write_first_time();
    2904:	0e 94 f7 11 	call	0x23ee	; 0x23ee <write_first_time>
		array_not_equal_flag = 0;
    2908:	fe 01       	movw	r30, r28
    290a:	e1 5b       	subi	r30, 0xB1	; 177
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	10 82       	st	Z, r1
    2910:	a4 c0       	rjmp	.+328    	; 0x2a5a <write_first_time+0x66c>
	}
	else
	{
		LCD_clearScreen();
    2912:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayString("Password Saved !");
    2916:	8f ee       	ldi	r24, 0xEF	; 239
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		/* Sending Password to the Control MC to be saved in the E2PROM */
		UART_sendByte(COMMAND_2);
    291e:	81 e4       	ldi	r24, 0x41	; 65
    2920:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
		for(int i = 0 ; i < 5 ; i++)
    2924:	fe 01       	movw	r30, r28
    2926:	e9 5b       	subi	r30, 0xB9	; 185
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	11 82       	std	Z+1, r1	; 0x01
    292c:	10 82       	st	Z, r1
    292e:	1b c0       	rjmp	.+54     	; 0x2966 <write_first_time+0x578>
		{
			UART_sendByte(g_password_array[i]);
    2930:	fe 01       	movw	r30, r28
    2932:	e9 5b       	subi	r30, 0xB9	; 185
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	fc 01       	movw	r30, r24
    293c:	e8 5e       	subi	r30, 0xE8	; 232
    293e:	fe 4f       	sbci	r31, 0xFE	; 254
    2940:	80 81       	ld	r24, Z
    2942:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
			while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
    2946:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    294a:	80 31       	cpi	r24, 0x10	; 16
    294c:	e1 f7       	brne	.-8      	; 0x2946 <write_first_time+0x558>
	{
		LCD_clearScreen();
		LCD_displayString("Password Saved !");
		/* Sending Password to the Control MC to be saved in the E2PROM */
		UART_sendByte(COMMAND_2);
		for(int i = 0 ; i < 5 ; i++)
    294e:	de 01       	movw	r26, r28
    2950:	a9 5b       	subi	r26, 0xB9	; 185
    2952:	bf 4f       	sbci	r27, 0xFF	; 255
    2954:	fe 01       	movw	r30, r28
    2956:	e9 5b       	subi	r30, 0xB9	; 185
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	01 96       	adiw	r24, 0x01	; 1
    2960:	11 96       	adiw	r26, 0x01	; 1
    2962:	9c 93       	st	X, r25
    2964:	8e 93       	st	-X, r24
    2966:	fe 01       	movw	r30, r28
    2968:	e9 5b       	subi	r30, 0xB9	; 185
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	85 30       	cpi	r24, 0x05	; 5
    2972:	91 05       	cpc	r25, r1
    2974:	ec f2       	brlt	.-70     	; 0x2930 <write_first_time+0x542>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	aa ef       	ldi	r26, 0xFA	; 250
    297c:	b3 e4       	ldi	r27, 0x43	; 67
    297e:	8b 87       	std	Y+11, r24	; 0x0b
    2980:	9c 87       	std	Y+12, r25	; 0x0c
    2982:	ad 87       	std	Y+13, r26	; 0x0d
    2984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2986:	6b 85       	ldd	r22, Y+11	; 0x0b
    2988:	7c 85       	ldd	r23, Y+12	; 0x0c
    298a:	8d 85       	ldd	r24, Y+13	; 0x0d
    298c:	9e 85       	ldd	r25, Y+14	; 0x0e
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8f 83       	std	Y+7, r24	; 0x07
    29a0:	98 87       	std	Y+8, r25	; 0x08
    29a2:	a9 87       	std	Y+9, r26	; 0x09
    29a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a6:	6f 81       	ldd	r22, Y+7	; 0x07
    29a8:	78 85       	ldd	r23, Y+8	; 0x08
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	2c f4       	brge	.+10     	; 0x29c8 <write_first_time+0x5da>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	3f c0       	rjmp	.+126    	; 0x2a46 <write_first_time+0x658>
	else if (__tmp > 65535)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	4f e7       	ldi	r20, 0x7F	; 127
    29d6:	57 e4       	ldi	r21, 0x47	; 71
    29d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29dc:	18 16       	cp	r1, r24
    29de:	4c f5       	brge	.+82     	; 0x2a32 <write_first_time+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e2       	ldi	r20, 0x20	; 32
    29ee:	51 e4       	ldi	r21, 0x41	; 65
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	0f c0       	rjmp	.+30     	; 0x2a28 <write_first_time+0x63a>
    2a0a:	88 ec       	ldi	r24, 0xC8	; 200
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9c 83       	std	Y+4, r25	; 0x04
    2a10:	8b 83       	std	Y+3, r24	; 0x03
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <write_first_time+0x628>
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	69 f7       	brne	.-38     	; 0x2a0a <write_first_time+0x61c>
    2a30:	14 c0       	rjmp	.+40     	; 0x2a5a <write_first_time+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	9a 83       	std	Y+2, r25	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <write_first_time+0x664>
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
			while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
		}
		_delay_ms(500);
	}

}
    2a5a:	c1 5b       	subi	r28, 0xB1	; 177
    2a5c:	df 4f       	sbci	r29, 0xFF	; 255
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	08 95       	ret

00002a72 <check_first_time>:

void check_first_time(void)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	61 97       	sbiw	r28, 0x11	; 17
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2a86:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayString("Welcome");
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	UART_sendByte(COMMAND_1);
    2a92:	80 e4       	ldi	r24, 0x40	; 64
    2a94:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
	uint8 receivedByte = 0 ; /* variable used to store data received from UART */
    2a98:	19 8a       	std	Y+17, r1	; 0x11
	receivedByte = UART_recieveByte();
    2a9a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    2a9e:	89 8b       	std	Y+17, r24	; 0x11
	if(receivedByte == APP_IS_INITIALIZED) /* That means the App is initialized and the E2PROM has the password saved */
    2aa0:	89 89       	ldd	r24, Y+17	; 0x11
    2aa2:	8a 3f       	cpi	r24, 0xFA	; 250
    2aa4:	01 f5       	brne	.+64     	; 0x2ae6 <check_first_time+0x74>
	{
		/* Send command to save the password from the E2PROM*/
		UART_sendByte(COMMAND_3);
    2aa6:	82 e4       	ldi	r24, 0x42	; 66
    2aa8:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
		for(int i = 0 ; i < 5 ; i++)
    2aac:	18 8a       	std	Y+16, r1	; 0x10
    2aae:	1f 86       	std	Y+15, r1	; 0x0f
    2ab0:	12 c0       	rjmp	.+36     	; 0x2ad6 <check_first_time+0x64>
		{
			receivedByte = UART_recieveByte();
    2ab2:	0e 94 3b 1a 	call	0x3476	; 0x3476 <UART_recieveByte>
    2ab6:	89 8b       	std	Y+17, r24	; 0x11
			g_password_array[i] = receivedByte;
    2ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aba:	98 89       	ldd	r25, Y+16	; 0x10
    2abc:	fc 01       	movw	r30, r24
    2abe:	e8 5e       	subi	r30, 0xE8	; 232
    2ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	80 83       	st	Z, r24
			UART_sendByte(M1_READY);
    2ac6:	81 e1       	ldi	r24, 0x11	; 17
    2ac8:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
	receivedByte = UART_recieveByte();
	if(receivedByte == APP_IS_INITIALIZED) /* That means the App is initialized and the E2PROM has the password saved */
	{
		/* Send command to save the password from the E2PROM*/
		UART_sendByte(COMMAND_3);
		for(int i = 0 ; i < 5 ; i++)
    2acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ace:	98 89       	ldd	r25, Y+16	; 0x10
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	98 8b       	std	Y+16, r25	; 0x10
    2ad4:	8f 87       	std	Y+15, r24	; 0x0f
    2ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad8:	98 89       	ldd	r25, Y+16	; 0x10
    2ada:	85 30       	cpi	r24, 0x05	; 5
    2adc:	91 05       	cpc	r25, r1
    2ade:	4c f3       	brlt	.-46     	; 0x2ab2 <check_first_time+0x40>
		{
			receivedByte = UART_recieveByte();
			g_password_array[i] = receivedByte;
			UART_sendByte(M1_READY);
		}
		main_options();
    2ae0:	0e 94 9f 0b 	call	0x173e	; 0x173e <main_options>
    2ae4:	78 c0       	rjmp	.+240    	; 0x2bd6 <check_first_time+0x164>
	}
	else if(receivedByte == APP_IS_NOT_INITIALIZED) /* That means the App is not initialized and the user needs to save a password */
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	85 3f       	cpi	r24, 0xF5	; 245
    2aea:	09 f0       	breq	.+2      	; 0x2aee <check_first_time+0x7c>
    2aec:	74 c0       	rjmp	.+232    	; 0x2bd6 <check_first_time+0x164>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	aa e7       	ldi	r26, 0x7A	; 122
    2af4:	b4 e4       	ldi	r27, 0x44	; 68
    2af6:	8b 87       	std	Y+11, r24	; 0x0b
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	ad 87       	std	Y+13, r26	; 0x0d
    2afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a ef       	ldi	r20, 0xFA	; 250
    2b0c:	54 e4       	ldi	r21, 0x44	; 68
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8f 83       	std	Y+7, r24	; 0x07
    2b18:	98 87       	std	Y+8, r25	; 0x08
    2b1a:	a9 87       	std	Y+9, r26	; 0x09
    2b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <check_first_time+0xce>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <check_first_time+0x14c>
	else if (__tmp > 65535)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <check_first_time+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <check_first_time+0x12e>
    2b82:	88 ec       	ldi	r24, 0xC8	; 200
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <check_first_time+0x11c>
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <check_first_time+0x110>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <check_first_time+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <check_first_time+0x158>
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1000);
		write_first_time();
    2bd2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <write_first_time>

	}

}
    2bd6:	61 96       	adiw	r28, 0x11	; 17
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* Timer0 Overflow ISR */
ISR(TIMER0_OVF_vect)
{
    2be8:	1f 92       	push	r1
    2bea:	0f 92       	push	r0
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	0f 92       	push	r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	2f 93       	push	r18
    2bf4:	3f 93       	push	r19
    2bf6:	4f 93       	push	r20
    2bf8:	5f 93       	push	r21
    2bfa:	6f 93       	push	r22
    2bfc:	7f 93       	push	r23
    2bfe:	8f 93       	push	r24
    2c00:	9f 93       	push	r25
    2c02:	af 93       	push	r26
    2c04:	bf 93       	push	r27
    2c06:	ef 93       	push	r30
    2c08:	ff 93       	push	r31
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    2c12:	80 91 29 01 	lds	r24, 0x0129
    2c16:	90 91 2a 01 	lds	r25, 0x012A
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	29 f0       	breq	.+10     	; 0x2c28 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer0)(); /* another method to call the function using pointer to function g_callBackPtrTimer0(); */
    2c1e:	e0 91 29 01 	lds	r30, 0x0129
    2c22:	f0 91 2a 01 	lds	r31, 0x012A
    2c26:	09 95       	icall
	}
	TIFR  |= (1<<TOV0); // Clear MIF (Interrupt Flag)
    2c28:	a8 e5       	ldi	r26, 0x58	; 88
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e8 e5       	ldi	r30, 0x58	; 88
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	81 60       	ori	r24, 0x01	; 1
    2c34:	8c 93       	st	X, r24
}
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	ff 91       	pop	r31
    2c3c:	ef 91       	pop	r30
    2c3e:	bf 91       	pop	r27
    2c40:	af 91       	pop	r26
    2c42:	9f 91       	pop	r25
    2c44:	8f 91       	pop	r24
    2c46:	7f 91       	pop	r23
    2c48:	6f 91       	pop	r22
    2c4a:	5f 91       	pop	r21
    2c4c:	4f 91       	pop	r20
    2c4e:	3f 91       	pop	r19
    2c50:	2f 91       	pop	r18
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <__vector_19>:
/* Timer0 Compare ISR */
ISR(TIMER0_COMP_vect)
{
    2c5c:	1f 92       	push	r1
    2c5e:	0f 92       	push	r0
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	0f 92       	push	r0
    2c64:	11 24       	eor	r1, r1
    2c66:	2f 93       	push	r18
    2c68:	3f 93       	push	r19
    2c6a:	4f 93       	push	r20
    2c6c:	5f 93       	push	r21
    2c6e:	6f 93       	push	r22
    2c70:	7f 93       	push	r23
    2c72:	8f 93       	push	r24
    2c74:	9f 93       	push	r25
    2c76:	af 93       	push	r26
    2c78:	bf 93       	push	r27
    2c7a:	ef 93       	push	r30
    2c7c:	ff 93       	push	r31
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    2c86:	80 91 29 01 	lds	r24, 0x0129
    2c8a:	90 91 2a 01 	lds	r25, 0x012A
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	29 f0       	breq	.+10     	; 0x2c9c <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer0)(); /* another method to call the function using pointer to function g_callBackPtrTimer0(); */
    2c92:	e0 91 29 01 	lds	r30, 0x0129
    2c96:	f0 91 2a 01 	lds	r31, 0x012A
    2c9a:	09 95       	icall
	}
	TIFR  |= (1<<OCF0); // Clear MIF (Interrupt Flag)
    2c9c:	a8 e5       	ldi	r26, 0x58	; 88
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e8 e5       	ldi	r30, 0x58	; 88
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	82 60       	ori	r24, 0x02	; 2
    2ca8:	8c 93       	st	X, r24
}
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	ff 91       	pop	r31
    2cb0:	ef 91       	pop	r30
    2cb2:	bf 91       	pop	r27
    2cb4:	af 91       	pop	r26
    2cb6:	9f 91       	pop	r25
    2cb8:	8f 91       	pop	r24
    2cba:	7f 91       	pop	r23
    2cbc:	6f 91       	pop	r22
    2cbe:	5f 91       	pop	r21
    2cc0:	4f 91       	pop	r20
    2cc2:	3f 91       	pop	r19
    2cc4:	2f 91       	pop	r18
    2cc6:	0f 90       	pop	r0
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	0f 90       	pop	r0
    2ccc:	1f 90       	pop	r1
    2cce:	18 95       	reti

00002cd0 <__vector_8>:
/* Timer1 Overflow ISR */
ISR(TIMER1_OVF_vect)
{
    2cd0:	1f 92       	push	r1
    2cd2:	0f 92       	push	r0
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	0f 92       	push	r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	ef 93       	push	r30
    2cf0:	ff 93       	push	r31
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    2cfa:	80 91 2b 01 	lds	r24, 0x012B
    2cfe:	90 91 2c 01 	lds	r25, 0x012C
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	29 f0       	breq	.+10     	; 0x2d10 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer1)(); /* another method to call the function using pointer to function g_callBackPtrTimer1(); */
    2d06:	e0 91 2b 01 	lds	r30, 0x012B
    2d0a:	f0 91 2c 01 	lds	r31, 0x012C
    2d0e:	09 95       	icall
	}
	TIFR  |= (1<<TOIE1); // Clear MIF (Interrupt Flag)
    2d10:	a8 e5       	ldi	r26, 0x58	; 88
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e8 e5       	ldi	r30, 0x58	; 88
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	84 60       	ori	r24, 0x04	; 4
    2d1c:	8c 93       	st	X, r24
}
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	ff 91       	pop	r31
    2d24:	ef 91       	pop	r30
    2d26:	bf 91       	pop	r27
    2d28:	af 91       	pop	r26
    2d2a:	9f 91       	pop	r25
    2d2c:	8f 91       	pop	r24
    2d2e:	7f 91       	pop	r23
    2d30:	6f 91       	pop	r22
    2d32:	5f 91       	pop	r21
    2d34:	4f 91       	pop	r20
    2d36:	3f 91       	pop	r19
    2d38:	2f 91       	pop	r18
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f 90       	pop	r0
    2d40:	1f 90       	pop	r1
    2d42:	18 95       	reti

00002d44 <__vector_6>:
/* Timer1 Compare ISR */
ISR(TIMER1_COMPA_vect)
{
    2d44:	1f 92       	push	r1
    2d46:	0f 92       	push	r0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	4f 93       	push	r20
    2d54:	5f 93       	push	r21
    2d56:	6f 93       	push	r22
    2d58:	7f 93       	push	r23
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	af 93       	push	r26
    2d60:	bf 93       	push	r27
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    2d6e:	80 91 2b 01 	lds	r24, 0x012B
    2d72:	90 91 2c 01 	lds	r25, 0x012C
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	29 f0       	breq	.+10     	; 0x2d84 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer1)(); /* another method to call the function using pointer to function g_callBackPtrTimer1(); */
    2d7a:	e0 91 2b 01 	lds	r30, 0x012B
    2d7e:	f0 91 2c 01 	lds	r31, 0x012C
    2d82:	09 95       	icall
	}
	TIFR  |= (1<<OCIE1A); // Clear MIF (Interrupt Flag)
    2d84:	a8 e5       	ldi	r26, 0x58	; 88
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e8 e5       	ldi	r30, 0x58	; 88
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	80 61       	ori	r24, 0x10	; 16
    2d90:	8c 93       	st	X, r24
}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	ff 91       	pop	r31
    2d98:	ef 91       	pop	r30
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_4>:

/* Timer2 Overflow ISR */
ISR(TIMER2_OVF_vect)
{
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	2f 93       	push	r18
    2dc4:	3f 93       	push	r19
    2dc6:	4f 93       	push	r20
    2dc8:	5f 93       	push	r21
    2dca:	6f 93       	push	r22
    2dcc:	7f 93       	push	r23
    2dce:	8f 93       	push	r24
    2dd0:	9f 93       	push	r25
    2dd2:	af 93       	push	r26
    2dd4:	bf 93       	push	r27
    2dd6:	ef 93       	push	r30
    2dd8:	ff 93       	push	r31
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    2de2:	80 91 2d 01 	lds	r24, 0x012D
    2de6:	90 91 2e 01 	lds	r25, 0x012E
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	29 f0       	breq	.+10     	; 0x2df8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer2)(); /* another method to call the function using pointer to function g_callBackPtrTimer2(); */
    2dee:	e0 91 2d 01 	lds	r30, 0x012D
    2df2:	f0 91 2e 01 	lds	r31, 0x012E
    2df6:	09 95       	icall
	}
	TIFR  |= (1<<TOV2); // Clear MIF (Interrupt Flag)
    2df8:	a8 e5       	ldi	r26, 0x58	; 88
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e8 e5       	ldi	r30, 0x58	; 88
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	80 64       	ori	r24, 0x40	; 64
    2e04:	8c 93       	st	X, r24
}
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	ff 91       	pop	r31
    2e0c:	ef 91       	pop	r30
    2e0e:	bf 91       	pop	r27
    2e10:	af 91       	pop	r26
    2e12:	9f 91       	pop	r25
    2e14:	8f 91       	pop	r24
    2e16:	7f 91       	pop	r23
    2e18:	6f 91       	pop	r22
    2e1a:	5f 91       	pop	r21
    2e1c:	4f 91       	pop	r20
    2e1e:	3f 91       	pop	r19
    2e20:	2f 91       	pop	r18
    2e22:	0f 90       	pop	r0
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	0f 90       	pop	r0
    2e28:	1f 90       	pop	r1
    2e2a:	18 95       	reti

00002e2c <__vector_3>:
/* Timer2 Compare ISR */
ISR(TIMER2_COMP_vect)
{
    2e2c:	1f 92       	push	r1
    2e2e:	0f 92       	push	r0
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	0f 92       	push	r0
    2e34:	11 24       	eor	r1, r1
    2e36:	2f 93       	push	r18
    2e38:	3f 93       	push	r19
    2e3a:	4f 93       	push	r20
    2e3c:	5f 93       	push	r21
    2e3e:	6f 93       	push	r22
    2e40:	7f 93       	push	r23
    2e42:	8f 93       	push	r24
    2e44:	9f 93       	push	r25
    2e46:	af 93       	push	r26
    2e48:	bf 93       	push	r27
    2e4a:	ef 93       	push	r30
    2e4c:	ff 93       	push	r31
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    2e56:	80 91 2d 01 	lds	r24, 0x012D
    2e5a:	90 91 2e 01 	lds	r25, 0x012E
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	29 f0       	breq	.+10     	; 0x2e6c <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer2)(); /* another method to call the function using pointer to function g_callBackPtrTimer2(); */
    2e62:	e0 91 2d 01 	lds	r30, 0x012D
    2e66:	f0 91 2e 01 	lds	r31, 0x012E
    2e6a:	09 95       	icall
	}
	TIFR  |= (1<<OCF2); // Clear MIF (Interrupt Flag)
    2e6c:	a8 e5       	ldi	r26, 0x58	; 88
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e8 e5       	ldi	r30, 0x58	; 88
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	80 68       	ori	r24, 0x80	; 128
    2e78:	8c 93       	st	X, r24
}
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	ff 91       	pop	r31
    2e80:	ef 91       	pop	r30
    2e82:	bf 91       	pop	r27
    2e84:	af 91       	pop	r26
    2e86:	9f 91       	pop	r25
    2e88:	8f 91       	pop	r24
    2e8a:	7f 91       	pop	r23
    2e8c:	6f 91       	pop	r22
    2e8e:	5f 91       	pop	r21
    2e90:	4f 91       	pop	r20
    2e92:	3f 91       	pop	r19
    2e94:	2f 91       	pop	r18
    2e96:	0f 90       	pop	r0
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	0f 90       	pop	r0
    2e9c:	1f 90       	pop	r1
    2e9e:	18 95       	reti

00002ea0 <Timer_init>:
 * 	3. Set the Initial Value (Normal or Compare modes).
 * 	4. Set the Compare Value (Compare mode ONLY).
 * 	5. Set Pre_scaler for the timer.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <Timer_init+0x6>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
	/* Check on the Timer channel */
	if((Config_Ptr->Channel) == TIMER_0) /*Timer 0*/
    2eae:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 23       	and	r24, r24
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <Timer_init+0x1a>
    2eb8:	72 c0       	rjmp	.+228    	; 0x2f9e <Timer_init+0xfe>
	{
		if((Config_Ptr->Mode) == NORMAL)
    2eba:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebe:	81 81       	ldd	r24, Z+1	; 0x01
    2ec0:	88 23       	and	r24, r24
    2ec2:	e1 f4       	brne	.+56     	; 0x2efc <Timer_init+0x5c>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    2ec4:	a2 e5       	ldi	r26, 0x52	; 82
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Normal mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Set Pre-scaler
			 */
			TCCR0  = (1<<FOC0) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Normal Mode */
    2ed2:	a3 e5       	ldi	r26, 0x53	; 83
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e3 e5       	ldi	r30, 0x53	; 83
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	88 77       	andi	r24, 0x78	; 120
    2ede:	98 2f       	mov	r25, r24
    2ee0:	90 68       	ori	r25, 0x80	; 128
    2ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee6:	86 81       	ldd	r24, Z+6	; 0x06
    2ee8:	89 2b       	or	r24, r25
    2eea:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0); /* Enable Timer0 OVF Interrupt enable (MIE) */
    2eec:	a9 e5       	ldi	r26, 0x59	; 89
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e9 e5       	ldi	r30, 0x59	; 89
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	81 60       	ori	r24, 0x01	; 1
    2ef8:	8c 93       	st	X, r24
    2efa:	54 c1       	rjmp	.+680    	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    2efc:	e9 81       	ldd	r30, Y+1	; 0x01
    2efe:	fa 81       	ldd	r31, Y+2	; 0x02
    2f00:	81 81       	ldd	r24, Z+1	; 0x01
    2f02:	82 30       	cpi	r24, 0x02	; 2
    2f04:	19 f5       	brne	.+70     	; 0x2f4c <Timer_init+0xac>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    2f06:	a2 e5       	ldi	r26, 0x52	; 82
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	8c 93       	st	X, r24
			OCR0   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    2f14:	ac e5       	ldi	r26, 0x5C	; 92
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1c:	84 81       	ldd	r24, Z+4	; 0x04
    2f1e:	95 81       	ldd	r25, Z+5	; 0x05
    2f20:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Compare mode FOC0=1
			 * 2. Compare Mode WGM01=1 & WGM00=0
			 * 3. Set Pre-scaler
			 */
			TCCR0  = (1<<FOC0) | (1<<WGM01) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Compare Mode */
    2f22:	a3 e5       	ldi	r26, 0x53	; 83
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e3 e5       	ldi	r30, 0x53	; 83
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	80 77       	andi	r24, 0x70	; 112
    2f2e:	98 2f       	mov	r25, r24
    2f30:	98 68       	ori	r25, 0x88	; 136
    2f32:	e9 81       	ldd	r30, Y+1	; 0x01
    2f34:	fa 81       	ldd	r31, Y+2	; 0x02
    2f36:	86 81       	ldd	r24, Z+6	; 0x06
    2f38:	89 2b       	or	r24, r25
    2f3a:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt enable (MIE) */
    2f3c:	a9 e5       	ldi	r26, 0x59	; 89
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e9 e5       	ldi	r30, 0x59	; 89
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	82 60       	ori	r24, 0x02	; 2
    2f48:	8c 93       	st	X, r24
    2f4a:	2c c1       	rjmp	.+600    	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	81 81       	ldd	r24, Z+1	; 0x01
    2f52:	83 30       	cpi	r24, 0x03	; 3
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <Timer_init+0xb8>
    2f56:	26 c1       	rjmp	.+588    	; 0x31a4 <Timer_init+0x304>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    2f58:	a2 e5       	ldi	r26, 0x52	; 82
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	8c 93       	st	X, r24
			OCR0   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    2f66:	ac e5       	ldi	r26, 0x5C	; 92
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	84 81       	ldd	r24, Z+4	; 0x04
    2f70:	95 81       	ldd	r25, Z+5	; 0x05
    2f72:	8c 93       	st	X, r24
			DDRB  |= (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    2f74:	a7 e3       	ldi	r26, 0x37	; 55
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e7 e3       	ldi	r30, 0x37	; 55
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 60       	ori	r24, 0x08	; 8
    2f80:	8c 93       	st	X, r24
			TCCR0  = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);
    2f82:	a3 e5       	ldi	r26, 0x53	; 83
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e3 e5       	ldi	r30, 0x53	; 83
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 79       	andi	r24, 0x90	; 144
    2f8e:	98 2f       	mov	r25, r24
    2f90:	98 66       	ori	r25, 0x68	; 104
    2f92:	e9 81       	ldd	r30, Y+1	; 0x01
    2f94:	fa 81       	ldd	r31, Y+2	; 0x02
    2f96:	86 81       	ldd	r24, Z+6	; 0x06
    2f98:	89 2b       	or	r24, r25
    2f9a:	8c 93       	st	X, r24
    2f9c:	03 c1       	rjmp	.+518    	; 0x31a4 <Timer_init+0x304>
		}
	}
	else if((Config_Ptr->Channel) == TIMER_1)
    2f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa2:	80 81       	ld	r24, Z
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <Timer_init+0x10a>
    2fa8:	87 c0       	rjmp	.+270    	; 0x30b8 <Timer_init+0x218>
	{
		if((Config_Ptr->Mode) == NORMAL)
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	81 81       	ldd	r24, Z+1	; 0x01
    2fb0:	88 23       	and	r24, r24
    2fb2:	09 f5       	brne	.+66     	; 0x2ff6 <Timer_init+0x156>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    2fb4:	ac e4       	ldi	r26, 0x4C	; 76
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	11 96       	adiw	r26, 0x01	; 1
    2fc2:	9c 93       	st	X, r25
    2fc4:	8e 93       	st	-X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 0)
			 */
			TCCR1A = (1<<FOC1A);
    2fc6:	ef e4       	ldi	r30, 0x4F	; 79
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	88 e0       	ldi	r24, 0x08	; 8
    2fcc:	80 83       	st	Z, r24
			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 0)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    2fce:	ae e4       	ldi	r26, 0x4E	; 78
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ee e4       	ldi	r30, 0x4E	; 78
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	98 2f       	mov	r25, r24
    2fda:	98 7f       	andi	r25, 0xF8	; 248
    2fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fde:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe0:	86 81       	ldd	r24, Z+6	; 0x06
    2fe2:	89 2b       	or	r24, r25
    2fe4:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE1); /* Enable Timer1 OVF Interrupt enable (MIE) */
    2fe6:	a9 e5       	ldi	r26, 0x59	; 89
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e9 e5       	ldi	r30, 0x59	; 89
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	84 60       	ori	r24, 0x04	; 4
    2ff2:	8c 93       	st	X, r24
    2ff4:	d7 c0       	rjmp	.+430    	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    2ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffa:	81 81       	ldd	r24, Z+1	; 0x01
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	59 f5       	brne	.+86     	; 0x3056 <Timer_init+0x1b6>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    3000:	ac e4       	ldi	r26, 0x4C	; 76
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	11 96       	adiw	r26, 0x01	; 1
    300e:	9c 93       	st	X, r25
    3010:	8e 93       	st	-X, r24
			OCR1A  = (Config_Ptr->Compare); // Output Compare Register
    3012:	aa e4       	ldi	r26, 0x4A	; 74
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	84 81       	ldd	r24, Z+4	; 0x04
    301c:	95 81       	ldd	r25, Z+5	; 0x05
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	9c 93       	st	X, r25
    3022:	8e 93       	st	-X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    3024:	ef e4       	ldi	r30, 0x4F	; 79
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	88 e0       	ldi	r24, 0x08	; 8
    302a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (1<<WGM12) | (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    302c:	ae e4       	ldi	r26, 0x4E	; 78
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ee e4       	ldi	r30, 0x4E	; 78
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	80 7f       	andi	r24, 0xF0	; 240
    3038:	98 2f       	mov	r25, r24
    303a:	98 60       	ori	r25, 0x08	; 8
    303c:	e9 81       	ldd	r30, Y+1	; 0x01
    303e:	fa 81       	ldd	r31, Y+2	; 0x02
    3040:	86 81       	ldd	r24, Z+6	; 0x06
    3042:	89 2b       	or	r24, r25
    3044:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare Interrupt enable (MIE)  */
    3046:	a9 e5       	ldi	r26, 0x59	; 89
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e9 e5       	ldi	r30, 0x59	; 89
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	80 61       	ori	r24, 0x10	; 16
    3052:	8c 93       	st	X, r24
    3054:	a7 c0       	rjmp	.+334    	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	81 81       	ldd	r24, Z+1	; 0x01
    305c:	83 30       	cpi	r24, 0x03	; 3
    305e:	09 f0       	breq	.+2      	; 0x3062 <Timer_init+0x1c2>
    3060:	a1 c0       	rjmp	.+322    	; 0x31a4 <Timer_init+0x304>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    3062:	ac e4       	ldi	r26, 0x4C	; 76
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e9 81       	ldd	r30, Y+1	; 0x01
    3068:	fa 81       	ldd	r31, Y+2	; 0x02
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	11 96       	adiw	r26, 0x01	; 1
    3070:	9c 93       	st	X, r25
    3072:	8e 93       	st	-X, r24
			OCR1A  = (Config_Ptr->Compare); // Output Compare Register
    3074:	aa e4       	ldi	r26, 0x4A	; 74
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	84 81       	ldd	r24, Z+4	; 0x04
    307e:	95 81       	ldd	r25, Z+5	; 0x05
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	9c 93       	st	X, r25
    3084:	8e 93       	st	-X, r24
			DDRD |= (1<<PD5); //set PD5/OC1A as output pin --> pin where the PWM signal is generated from MC.
    3086:	a1 e3       	ldi	r26, 0x31	; 49
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e1 e3       	ldi	r30, 0x31	; 49
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 62       	ori	r24, 0x20	; 32
    3092:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Connect OC1A and Disconnect OC1B  COM1A1=1 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=0 FOC1B=0
			 * 3. Fast PWM Mode WGM10=1 WGM11=1 (Mode Number 15)
			 */
			TCCR1A = (1<<COM1A1) | (1<<WGM10) | (1<<WGM11);
    3094:	ef e4       	ldi	r30, 0x4F	; 79
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	83 e8       	ldi	r24, 0x83	; 131
    309a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Fast PW WGM12=1 WGM13=1 (Mode Number 15)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    309c:	ae e4       	ldi	r26, 0x4E	; 78
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	ee e4       	ldi	r30, 0x4E	; 78
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	80 7e       	andi	r24, 0xE0	; 224
    30a8:	98 2f       	mov	r25, r24
    30aa:	98 61       	ori	r25, 0x18	; 24
    30ac:	e9 81       	ldd	r30, Y+1	; 0x01
    30ae:	fa 81       	ldd	r31, Y+2	; 0x02
    30b0:	86 81       	ldd	r24, Z+6	; 0x06
    30b2:	89 2b       	or	r24, r25
    30b4:	8c 93       	st	X, r24
    30b6:	76 c0       	rjmp	.+236    	; 0x31a4 <Timer_init+0x304>
		}
	}
	else if((Config_Ptr->Channel) == TIMER_2)
    30b8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ba:	fa 81       	ldd	r31, Y+2	; 0x02
    30bc:	80 81       	ld	r24, Z
    30be:	82 30       	cpi	r24, 0x02	; 2
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <Timer_init+0x224>
    30c2:	70 c0       	rjmp	.+224    	; 0x31a4 <Timer_init+0x304>
	{
		if((Config_Ptr->Mode) == NORMAL)
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	81 81       	ldd	r24, Z+1	; 0x01
    30ca:	88 23       	and	r24, r24
    30cc:	e1 f4       	brne	.+56     	; 0x3106 <Timer_init+0x266>
		{
			TCNT2  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    30ce:	a4 e4       	ldi	r26, 0x44	; 68
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Normal mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Set Pre-scaler
			 */
			TCCR2  = (1<<FOC2) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Normal Mode */
    30dc:	a5 e4       	ldi	r26, 0x45	; 69
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e5 e4       	ldi	r30, 0x45	; 69
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 77       	andi	r24, 0x78	; 120
    30e8:	98 2f       	mov	r25, r24
    30ea:	90 68       	ori	r25, 0x80	; 128
    30ec:	e9 81       	ldd	r30, Y+1	; 0x01
    30ee:	fa 81       	ldd	r31, Y+2	; 0x02
    30f0:	86 81       	ldd	r24, Z+6	; 0x06
    30f2:	89 2b       	or	r24, r25
    30f4:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2); /* Enable Timer0 OVF Interrupt enable (MIE) */
    30f6:	a9 e5       	ldi	r26, 0x59	; 89
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e9 e5       	ldi	r30, 0x59	; 89
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	80 64       	ori	r24, 0x40	; 64
    3102:	8c 93       	st	X, r24
    3104:	4f c0       	rjmp	.+158    	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    3106:	e9 81       	ldd	r30, Y+1	; 0x01
    3108:	fa 81       	ldd	r31, Y+2	; 0x02
    310a:	81 81       	ldd	r24, Z+1	; 0x01
    310c:	82 30       	cpi	r24, 0x02	; 2
    310e:	19 f5       	brne	.+70     	; 0x3156 <Timer_init+0x2b6>
		{
			TCNT2  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    3110:	a4 e4       	ldi	r26, 0x44	; 68
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	8c 93       	st	X, r24
			OCR2   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    311e:	a3 e4       	ldi	r26, 0x43	; 67
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	fa 81       	ldd	r31, Y+2	; 0x02
    3126:	84 81       	ldd	r24, Z+4	; 0x04
    3128:	95 81       	ldd	r25, Z+5	; 0x05
    312a:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Compare mode FOC2=1
			 * 2. Compare Mode WGM21=1 & WGM20=0
			 * 3. Set Pre-scaler
			 */
			TCCR2  = (1<<FOC2) | (1<<WGM21) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Compare Mode */
    312c:	a5 e4       	ldi	r26, 0x45	; 69
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e5 e4       	ldi	r30, 0x45	; 69
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	80 77       	andi	r24, 0x70	; 112
    3138:	98 2f       	mov	r25, r24
    313a:	98 68       	ori	r25, 0x88	; 136
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	86 81       	ldd	r24, Z+6	; 0x06
    3142:	89 2b       	or	r24, r25
    3144:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2); /* Enable Timer0 Compare Interrupt enable (MIE) */
    3146:	a9 e5       	ldi	r26, 0x59	; 89
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 e5       	ldi	r30, 0x59	; 89
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	80 68       	ori	r24, 0x80	; 128
    3152:	8c 93       	st	X, r24
    3154:	27 c0       	rjmp	.+78     	; 0x31a4 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    3156:	e9 81       	ldd	r30, Y+1	; 0x01
    3158:	fa 81       	ldd	r31, Y+2	; 0x02
    315a:	81 81       	ldd	r24, Z+1	; 0x01
    315c:	83 30       	cpi	r24, 0x03	; 3
    315e:	11 f5       	brne	.+68     	; 0x31a4 <Timer_init+0x304>
		{
			TCNT2 = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    3160:	a4 e4       	ldi	r26, 0x44	; 68
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	93 81       	ldd	r25, Z+3	; 0x03
    316c:	8c 93       	st	X, r24
			OCR2  = (uint8)(Config_Ptr->Compare); // Output Compare Register
    316e:	a3 e4       	ldi	r26, 0x43	; 67
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e9 81       	ldd	r30, Y+1	; 0x01
    3174:	fa 81       	ldd	r31, Y+2	; 0x02
    3176:	84 81       	ldd	r24, Z+4	; 0x04
    3178:	95 81       	ldd	r25, Z+5	; 0x05
    317a:	8c 93       	st	X, r24
			DDRD |= (1<<PD7); //set PD7/OC2 as output pin --> pin where the PWM signal is generated from MC.
    317c:	a1 e3       	ldi	r26, 0x31	; 49
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e1 e3       	ldi	r30, 0x31	; 49
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	80 68       	ori	r24, 0x80	; 128
    3188:	8c 93       	st	X, r24
			TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);
    318a:	a5 e4       	ldi	r26, 0x45	; 69
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e5 e4       	ldi	r30, 0x45	; 69
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	80 79       	andi	r24, 0x90	; 144
    3196:	98 2f       	mov	r25, r24
    3198:	98 66       	ori	r25, 0x68	; 104
    319a:	e9 81       	ldd	r30, Y+1	; 0x01
    319c:	fa 81       	ldd	r31, Y+2	; 0x02
    319e:	86 81       	ldd	r24, Z+6	; 0x06
    31a0:	89 2b       	or	r24, r25
    31a2:	8c 93       	st	X, r24
		}
	}
}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer0 .
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	00 d0       	rcall	.+0      	; 0x31b4 <Timer0_setCallBack+0x6>
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer0 = a_ptr;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	90 93 2a 01 	sts	0x012A, r25
    31c4:	80 93 29 01 	sts	0x0129, r24
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer1 .
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <Timer1_setCallBack+0x6>
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer1 = a_ptr;
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	90 93 2c 01 	sts	0x012C, r25
    31e8:	80 93 2b 01 	sts	0x012B, r24
}
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer2 .
 */
void Timer2_setCallBack(void(*a_ptr)(void))
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <Timer2_setCallBack+0x6>
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer2 = a_ptr;
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	90 93 2e 01 	sts	0x012E, r25
    320c:	80 93 2d 01 	sts	0x012D, r24
}
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <Timer_DeInit>:

/*
 * Description: Function to disable the Timer
 */
void Timer_DeInit(const Timer_channel Channel)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	89 83       	std	Y+1, r24	; 0x01
	if((Channel) == TIMER_0)
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	88 23       	and	r24, r24
    322a:	89 f4       	brne	.+34     	; 0x324e <Timer_DeInit+0x34>
	{
		TCCR0 = 0;
    322c:	e3 e5       	ldi	r30, 0x53	; 83
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	10 82       	st	Z, r1
		TCNT0 = 0;
    3232:	e2 e5       	ldi	r30, 0x52	; 82
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	10 82       	st	Z, r1
		OCR0  = 0;
    3238:	ec e5       	ldi	r30, 0x5C	; 92
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    323e:	a9 e5       	ldi	r26, 0x59	; 89
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	e9 e5       	ldi	r30, 0x59	; 89
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	8c 7f       	andi	r24, 0xFC	; 252
    324a:	8c 93       	st	X, r24
    324c:	2c c0       	rjmp	.+88     	; 0x32a6 <Timer_DeInit+0x8c>
	}
	else if((Channel)== TIMER_1)
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	b1 f4       	brne	.+44     	; 0x3280 <Timer_DeInit+0x66>
	{
		TCCR1A = 0;
    3254:	ef e4       	ldi	r30, 0x4F	; 79
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	10 82       	st	Z, r1
		TCCR1B = 0;
    325a:	ee e4       	ldi	r30, 0x4E	; 78
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	10 82       	st	Z, r1
		TCNT1 = 0;
    3260:	ec e4       	ldi	r30, 0x4C	; 76
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	11 82       	std	Z+1, r1	; 0x01
    3266:	10 82       	st	Z, r1
		OCR1A = 0;
    3268:	ea e4       	ldi	r30, 0x4A	; 74
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	11 82       	std	Z+1, r1	; 0x01
    326e:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    3270:	a9 e5       	ldi	r26, 0x59	; 89
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e9 e5       	ldi	r30, 0x59	; 89
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8b 7e       	andi	r24, 0xEB	; 235
    327c:	8c 93       	st	X, r24
    327e:	13 c0       	rjmp	.+38     	; 0x32a6 <Timer_DeInit+0x8c>
	}
	else if((Channel) == TIMER_2)
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	81 f4       	brne	.+32     	; 0x32a6 <Timer_DeInit+0x8c>
	{
		TCCR2 = 0;
    3286:	e5 e4       	ldi	r30, 0x45	; 69
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	10 82       	st	Z, r1
		TCNT2 = 0;
    328c:	e4 e4       	ldi	r30, 0x44	; 68
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	10 82       	st	Z, r1
		OCR2  = 0;
    3292:	e3 e4       	ldi	r30, 0x43	; 67
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    3298:	a9 e5       	ldi	r26, 0x59	; 89
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e9 e5       	ldi	r30, 0x59	; 89
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8f 73       	andi	r24, 0x3F	; 63
    32a4:	8c 93       	st	X, r24
	}
}
    32a6:	0f 90       	pop	r0
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <PWM_setDutyCycle>:

/* Function to set PWM , it can work with timer0 or timer2 , duty cycle is a value from 0 -> 100 (%) */
void PWM_setDutyCycle(uint16 OCR_value, const Timer_channel Channel)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <PWM_setDutyCycle+0x6>
    32b4:	0f 92       	push	r0
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	6b 83       	std	Y+3, r22	; 0x03
	if((Channel) == TIMER_0)
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	88 23       	and	r24, r24
    32c4:	29 f4       	brne	.+10     	; 0x32d0 <PWM_setDutyCycle+0x22>
	{
		OCR0 = (uint8)OCR_value;
    32c6:	ec e5       	ldi	r30, 0x5C	; 92
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	11 c0       	rjmp	.+34     	; 0x32f2 <PWM_setDutyCycle+0x44>
	}
	else if((Channel)== TIMER_1)
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	81 30       	cpi	r24, 0x01	; 1
    32d4:	39 f4       	brne	.+14     	; 0x32e4 <PWM_setDutyCycle+0x36>
	{
		OCR1A  = OCR_value;
    32d6:	ea e4       	ldi	r30, 0x4A	; 74
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	91 83       	std	Z+1, r25	; 0x01
    32e0:	80 83       	st	Z, r24
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <PWM_setDutyCycle+0x44>
	}
	else if((Channel) == TIMER_2)
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	82 30       	cpi	r24, 0x02	; 2
    32e8:	21 f4       	brne	.+8      	; 0x32f2 <PWM_setDutyCycle+0x44>
	{
		OCR2 = (uint8)OCR_value;
    32ea:	e3 e4       	ldi	r30, 0x43	; 67
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	80 83       	st	Z, r24
	}
}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* UART RX Complete ISR */
ISR(USART_RXC_vect)
{
    32fe:	1f 92       	push	r1
    3300:	0f 92       	push	r0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	8f 93       	push	r24
    330a:	9f 93       	push	r25
    330c:	ef 93       	push	r30
    330e:	ff 93       	push	r31
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
	g_UART_Result = UDR;
    3318:	ec e2       	ldi	r30, 0x2C	; 44
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	88 2f       	mov	r24, r24
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	90 93 30 01 	sts	0x0130, r25
    3326:	80 93 2f 01 	sts	0x012F, r24
}
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	ff 91       	pop	r31
    3330:	ef 91       	pop	r30
    3332:	9f 91       	pop	r25
    3334:	8f 91       	pop	r24
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	0f 90       	pop	r0
    333c:	1f 90       	pop	r1
    333e:	18 95       	reti

00003340 <UART_init>:
 * 	2. Set the number of Parity bits in the UART frame.
 * 	3. Set the number of Stop bits in the UART frame.
 * 	4. Set the Baud Rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	00 d0       	rcall	.+0      	; 0x3346 <UART_init+0x6>
    3346:	00 d0       	rcall	.+0      	; 0x3348 <UART_init+0x8>
    3348:	00 d0       	rcall	.+0      	; 0x334a <UART_init+0xa>
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
	uint32 BAUD_PRESCALE = (((F_CPU / ((Config_Ptr->Baud) * 8))) - 1);
    3352:	ed 81       	ldd	r30, Y+5	; 0x05
    3354:	fe 81       	ldd	r31, Y+6	; 0x06
    3356:	83 81       	ldd	r24, Z+3	; 0x03
    3358:	94 81       	ldd	r25, Z+4	; 0x04
    335a:	a5 81       	ldd	r26, Z+5	; 0x05
    335c:	b6 81       	ldd	r27, Z+6	; 0x06
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	aa 1f       	adc	r26, r26
    3364:	bb 1f       	adc	r27, r27
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	aa 1f       	adc	r26, r26
    336c:	bb 1f       	adc	r27, r27
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	aa 1f       	adc	r26, r26
    3374:	bb 1f       	adc	r27, r27
    3376:	9c 01       	movw	r18, r24
    3378:	ad 01       	movw	r20, r26
    337a:	80 e4       	ldi	r24, 0x40	; 64
    337c:	92 e4       	ldi	r25, 0x42	; 66
    337e:	af e0       	ldi	r26, 0x0F	; 15
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__udivmodsi4>
    338a:	da 01       	movw	r26, r20
    338c:	c9 01       	movw	r24, r18
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	a1 09       	sbc	r26, r1
    3392:	b1 09       	sbc	r27, r1
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	ab 83       	std	Y+3, r26	; 0x03
    339a:	bc 83       	std	Y+4, r27	; 0x04
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    339c:	eb e2       	ldi	r30, 0x2B	; 43
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
    33a4:	ea e2       	ldi	r30, 0x2A	; 42
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	88 e9       	ldi	r24, 0x98	; 152
    33aa:	80 83       	st	Z, r24
	if((Config_Ptr->Data)==NINE_Bit)
    33ac:	ed 81       	ldd	r30, Y+5	; 0x05
    33ae:	fe 81       	ldd	r31, Y+6	; 0x06
    33b0:	80 81       	ld	r24, Z
    33b2:	87 30       	cpi	r24, 0x07	; 7
    33b4:	39 f4       	brne	.+14     	; 0x33c4 <UART_init+0x84>
	{
		SET_BIT(UCSRB,UCSZ2);
    33b6:	aa e2       	ldi	r26, 0x2A	; 42
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	ea e2       	ldi	r30, 0x2A	; 42
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	84 60       	ori	r24, 0x04	; 4
    33c2:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit , 10 Enable Even Parity , 11 Enable Odd Parity
	 * USBS    = 0 One stop bit , 1 Two stop bits
	 * UCSZ1:0 = 00(5-bit mode) , 01 (6-bit mode) , 10 (7-bit mode) , 11 (8-bit mode)
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (UCSRC&0xC1) | (((Config_Ptr->Data)<<1)&0x06) | (((Config_Ptr->Parity)<<4)&0x30) | (((Config_Ptr->Stop)<<3)&0x08);
    33c4:	a0 e4       	ldi	r26, 0x40	; 64
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e0 e4       	ldi	r30, 0x40	; 64
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	81 74       	andi	r24, 0x41	; 65
    33d0:	28 2f       	mov	r18, r24
    33d2:	20 68       	ori	r18, 0x80	; 128
    33d4:	ed 81       	ldd	r30, Y+5	; 0x05
    33d6:	fe 81       	ldd	r31, Y+6	; 0x06
    33d8:	80 81       	ld	r24, Z
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	86 70       	andi	r24, 0x06	; 6
    33e4:	28 2b       	or	r18, r24
    33e6:	ed 81       	ldd	r30, Y+5	; 0x05
    33e8:	fe 81       	ldd	r31, Y+6	; 0x06
    33ea:	81 81       	ldd	r24, Z+1	; 0x01
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	82 95       	swap	r24
    33f2:	92 95       	swap	r25
    33f4:	90 7f       	andi	r25, 0xF0	; 240
    33f6:	98 27       	eor	r25, r24
    33f8:	80 7f       	andi	r24, 0xF0	; 240
    33fa:	98 27       	eor	r25, r24
    33fc:	80 73       	andi	r24, 0x30	; 48
    33fe:	28 2b       	or	r18, r24
    3400:	ed 81       	ldd	r30, Y+5	; 0x05
    3402:	fe 81       	ldd	r31, Y+6	; 0x06
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	88 70       	andi	r24, 0x08	; 8
    3418:	82 2b       	or	r24, r18
    341a:	8c 93       	st	X, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ((uint8)BAUD_PRESCALE)>>8;
    341c:	e0 e4       	ldi	r30, 0x40	; 64
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	89 2f       	mov	r24, r25
    3428:	99 0f       	add	r25, r25
    342a:	99 0b       	sbc	r25, r25
    342c:	80 83       	st	Z, r24
	UBRRL =  (uint8)BAUD_PRESCALE;
    342e:	e9 e2       	ldi	r30, 0x29	; 41
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	80 83       	st	Z, r24

}
    3436:	26 96       	adiw	r28, 0x06	; 6
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	08 95       	ret

00003448 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	0f 92       	push	r0
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3454:	eb e2       	ldi	r30, 0x2B	; 43
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	88 2f       	mov	r24, r24
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	80 72       	andi	r24, 0x20	; 32
    3460:	90 70       	andi	r25, 0x00	; 0
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	b9 f3       	breq	.-18     	; 0x3454 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    3466:	ec e2       	ldi	r30, 0x2C	; 44
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	80 83       	st	Z, r24
}
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    347e:	eb e2       	ldi	r30, 0x2B	; 43
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	88 23       	and	r24, r24
    3486:	dc f7       	brge	.-10     	; 0x347e <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    3488:	ec e2       	ldi	r30, 0x2C	; 44
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <UART_sendString+0x6>
    349a:	0f 92       	push	r0
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	9b 83       	std	Y+3, r25	; 0x03
    34a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34a4:	19 82       	std	Y+1, r1	; 0x01
    34a6:	0e c0       	rjmp	.+28     	; 0x34c4 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	9b 81       	ldd	r25, Y+3	; 0x03
    34b2:	fc 01       	movw	r30, r24
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	80 81       	ld	r24, Z
    34ba:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_sendByte>
		i++;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	8f 5f       	subi	r24, 0xFF	; 255
    34c2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	9b 81       	ldd	r25, Y+3	; 0x03
    34ce:	fc 01       	movw	r30, r24
    34d0:	e2 0f       	add	r30, r18
    34d2:	f3 1f       	adc	r31, r19
    34d4:	80 81       	ld	r24, Z
    34d6:	88 23       	and	r24, r24
    34d8:	39 f7       	brne	.-50     	; 0x34a8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <UART_receiveString+0x6>
    34ec:	0f 92       	push	r0
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	9b 83       	std	Y+3, r25	; 0x03
    34f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34f6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = g_UART_Result;
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	fc 01       	movw	r30, r24
    3504:	e2 0f       	add	r30, r18
    3506:	f3 1f       	adc	r31, r19
    3508:	80 91 2f 01 	lds	r24, 0x012F
    350c:	90 91 30 01 	lds	r25, 0x0130
    3510:	80 83       	st	Z, r24
    3512:	10 c0       	rjmp	.+32     	; 0x3534 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = g_UART_Result;
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 91 2f 01 	lds	r24, 0x012F
    352e:	90 91 30 01 	lds	r25, 0x0130
    3532:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = g_UART_Result;
	while(Str[i] != '#')
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	28 2f       	mov	r18, r24
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	fc 01       	movw	r30, r24
    3540:	e2 0f       	add	r30, r18
    3542:	f3 1f       	adc	r31, r19
    3544:	80 81       	ld	r24, Z
    3546:	83 32       	cpi	r24, 0x23	; 35
    3548:	29 f7       	brne	.-54     	; 0x3514 <UART_receiveString+0x2e>
	{
		i++;
		Str[i] = g_UART_Result;
	}
	Str[i] = '\0';
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	9b 81       	ldd	r25, Y+3	; 0x03
    3554:	fc 01       	movw	r30, r24
    3556:	e2 0f       	add	r30, r18
    3558:	f3 1f       	adc	r31, r19
    355a:	10 82       	st	Z, r1
}
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <__udivmodsi4>:
    3568:	a1 e2       	ldi	r26, 0x21	; 33
    356a:	1a 2e       	mov	r1, r26
    356c:	aa 1b       	sub	r26, r26
    356e:	bb 1b       	sub	r27, r27
    3570:	fd 01       	movw	r30, r26
    3572:	0d c0       	rjmp	.+26     	; 0x358e <__udivmodsi4_ep>

00003574 <__udivmodsi4_loop>:
    3574:	aa 1f       	adc	r26, r26
    3576:	bb 1f       	adc	r27, r27
    3578:	ee 1f       	adc	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	a2 17       	cp	r26, r18
    357e:	b3 07       	cpc	r27, r19
    3580:	e4 07       	cpc	r30, r20
    3582:	f5 07       	cpc	r31, r21
    3584:	20 f0       	brcs	.+8      	; 0x358e <__udivmodsi4_ep>
    3586:	a2 1b       	sub	r26, r18
    3588:	b3 0b       	sbc	r27, r19
    358a:	e4 0b       	sbc	r30, r20
    358c:	f5 0b       	sbc	r31, r21

0000358e <__udivmodsi4_ep>:
    358e:	66 1f       	adc	r22, r22
    3590:	77 1f       	adc	r23, r23
    3592:	88 1f       	adc	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	1a 94       	dec	r1
    3598:	69 f7       	brne	.-38     	; 0x3574 <__udivmodsi4_loop>
    359a:	60 95       	com	r22
    359c:	70 95       	com	r23
    359e:	80 95       	com	r24
    35a0:	90 95       	com	r25
    35a2:	9b 01       	movw	r18, r22
    35a4:	ac 01       	movw	r20, r24
    35a6:	bd 01       	movw	r22, r26
    35a8:	cf 01       	movw	r24, r30
    35aa:	08 95       	ret

000035ac <__prologue_saves__>:
    35ac:	2f 92       	push	r2
    35ae:	3f 92       	push	r3
    35b0:	4f 92       	push	r4
    35b2:	5f 92       	push	r5
    35b4:	6f 92       	push	r6
    35b6:	7f 92       	push	r7
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	ca 1b       	sub	r28, r26
    35d6:	db 0b       	sbc	r29, r27
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	09 94       	ijmp

000035e4 <__epilogue_restores__>:
    35e4:	2a 88       	ldd	r2, Y+18	; 0x12
    35e6:	39 88       	ldd	r3, Y+17	; 0x11
    35e8:	48 88       	ldd	r4, Y+16	; 0x10
    35ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f6:	b9 84       	ldd	r11, Y+9	; 0x09
    35f8:	c8 84       	ldd	r12, Y+8	; 0x08
    35fa:	df 80       	ldd	r13, Y+7	; 0x07
    35fc:	ee 80       	ldd	r14, Y+6	; 0x06
    35fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3600:	0c 81       	ldd	r16, Y+4	; 0x04
    3602:	1b 81       	ldd	r17, Y+3	; 0x03
    3604:	aa 81       	ldd	r26, Y+2	; 0x02
    3606:	b9 81       	ldd	r27, Y+1	; 0x01
    3608:	ce 0f       	add	r28, r30
    360a:	d1 1d       	adc	r29, r1
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	ed 01       	movw	r28, r26
    3618:	08 95       	ret

0000361a <itoa>:
    361a:	fb 01       	movw	r30, r22
    361c:	9f 01       	movw	r18, r30
    361e:	e8 94       	clt
    3620:	42 30       	cpi	r20, 0x02	; 2
    3622:	c4 f0       	brlt	.+48     	; 0x3654 <itoa+0x3a>
    3624:	45 32       	cpi	r20, 0x25	; 37
    3626:	b4 f4       	brge	.+44     	; 0x3654 <itoa+0x3a>
    3628:	4a 30       	cpi	r20, 0x0A	; 10
    362a:	29 f4       	brne	.+10     	; 0x3636 <itoa+0x1c>
    362c:	97 fb       	bst	r25, 7
    362e:	1e f4       	brtc	.+6      	; 0x3636 <itoa+0x1c>
    3630:	90 95       	com	r25
    3632:	81 95       	neg	r24
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	64 2f       	mov	r22, r20
    3638:	77 27       	eor	r23, r23
    363a:	0e 94 3e 1b 	call	0x367c	; 0x367c <__udivmodhi4>
    363e:	80 5d       	subi	r24, 0xD0	; 208
    3640:	8a 33       	cpi	r24, 0x3A	; 58
    3642:	0c f0       	brlt	.+2      	; 0x3646 <itoa+0x2c>
    3644:	89 5d       	subi	r24, 0xD9	; 217
    3646:	81 93       	st	Z+, r24
    3648:	cb 01       	movw	r24, r22
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	a1 f7       	brne	.-24     	; 0x3636 <itoa+0x1c>
    364e:	16 f4       	brtc	.+4      	; 0x3654 <itoa+0x3a>
    3650:	5d e2       	ldi	r21, 0x2D	; 45
    3652:	51 93       	st	Z+, r21
    3654:	10 82       	st	Z, r1
    3656:	c9 01       	movw	r24, r18
    3658:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <strrev>

0000365c <strrev>:
    365c:	dc 01       	movw	r26, r24
    365e:	fc 01       	movw	r30, r24
    3660:	67 2f       	mov	r22, r23
    3662:	71 91       	ld	r23, Z+
    3664:	77 23       	and	r23, r23
    3666:	e1 f7       	brne	.-8      	; 0x3660 <strrev+0x4>
    3668:	32 97       	sbiw	r30, 0x02	; 2
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <strrev+0x18>
    366c:	7c 91       	ld	r23, X
    366e:	6d 93       	st	X+, r22
    3670:	70 83       	st	Z, r23
    3672:	62 91       	ld	r22, -Z
    3674:	ae 17       	cp	r26, r30
    3676:	bf 07       	cpc	r27, r31
    3678:	c8 f3       	brcs	.-14     	; 0x366c <strrev+0x10>
    367a:	08 95       	ret

0000367c <__udivmodhi4>:
    367c:	aa 1b       	sub	r26, r26
    367e:	bb 1b       	sub	r27, r27
    3680:	51 e1       	ldi	r21, 0x11	; 17
    3682:	07 c0       	rjmp	.+14     	; 0x3692 <__udivmodhi4_ep>

00003684 <__udivmodhi4_loop>:
    3684:	aa 1f       	adc	r26, r26
    3686:	bb 1f       	adc	r27, r27
    3688:	a6 17       	cp	r26, r22
    368a:	b7 07       	cpc	r27, r23
    368c:	10 f0       	brcs	.+4      	; 0x3692 <__udivmodhi4_ep>
    368e:	a6 1b       	sub	r26, r22
    3690:	b7 0b       	sbc	r27, r23

00003692 <__udivmodhi4_ep>:
    3692:	88 1f       	adc	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	5a 95       	dec	r21
    3698:	a9 f7       	brne	.-22     	; 0x3684 <__udivmodhi4_loop>
    369a:	80 95       	com	r24
    369c:	90 95       	com	r25
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	08 95       	ret

000036a4 <_exit>:
    36a4:	f8 94       	cli

000036a6 <__stop_program>:
    36a6:	ff cf       	rjmp	.-2      	; 0x36a6 <__stop_program>
