
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001fd2  00002066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800076  00800076  0000207c  2**0
                  ALLOC
  3 .stab         0000237c  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001246  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000563e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000577e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000058ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008422  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000091d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000095bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_3>
      10:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_8>
      24:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 07 	call	0xebe	; 0xebe <main>
      8a:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DCMotor_init>:
 *       				Functions Definitions		  			 		  	   *
 *******************************************************************************/

/* Public (Shared) Functions */
void DCMotor_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Setting the MC pins as output to the input of the H-bridge */
	SET_BIT(H_BRIDGE_IN_DIR,H_BRIDGE_IN1);
     b4e:	a7 e3       	ldi	r26, 0x37	; 55
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e3       	ldi	r30, 0x37	; 55
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(H_BRIDGE_IN_DIR,H_BRIDGE_IN2);
     b5c:	a7 e3       	ldi	r26, 0x37	; 55
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e3       	ldi	r30, 0x37	; 55
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24

	/* Motor is stop at the beginning */
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN1);
     b6a:	a8 e3       	ldi	r26, 0x38	; 56
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 e3       	ldi	r30, 0x38	; 56
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	8c 93       	st	X, r24
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN2);
     b78:	a8 e3       	ldi	r26, 0x38	; 56
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e8 e3       	ldi	r30, 0x38	; 56
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 77       	andi	r24, 0x7F	; 127
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DCMotor_stop>:

void DCMotor_stop(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN1);
     b94:	a8 e3       	ldi	r26, 0x38	; 56
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 e3       	ldi	r30, 0x38	; 56
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN2);
     ba2:	a8 e3       	ldi	r26, 0x38	; 56
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e8 e3       	ldi	r30, 0x38	; 56
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <DCMotor_clockwise>:
void DCMotor_clockwise(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN1);
     bbe:	a8 e3       	ldi	r26, 0x38	; 56
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 e3       	ldi	r30, 0x38	; 56
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7b       	andi	r24, 0xBF	; 191
     bca:	8c 93       	st	X, r24
	SET_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN2);
     bcc:	a8 e3       	ldi	r26, 0x38	; 56
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e8 e3       	ldi	r30, 0x38	; 56
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	8c 93       	st	X, r24
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <DCMotor_anti_clockwise>:

void DCMotor_anti_clockwise(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN1);
     be8:	a8 e3       	ldi	r26, 0x38	; 56
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e8 e3       	ldi	r30, 0x38	; 56
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
	CLEAR_BIT(H_BRIDGE_IN_PORT,H_BRIDGE_IN2);
     bf6:	a8 e3       	ldi	r26, 0x38	; 56
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e8 e3       	ldi	r30, 0x38	; 56
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	8c 93       	st	X, r24
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <EEPROM_writeByte>:
 */
#include "i2c.h"
#include "EEPROM.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <EEPROM_writeByte+0x6>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <EEPROM_writeByte+0x8>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c1c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_start>
    if (TWI_getStatus() != TW_START)
     c20:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	11 f0       	breq	.+4      	; 0xc2c <EEPROM_writeByte+0x22>
        return ERROR;
     c28:	1c 82       	std	Y+4, r1	; 0x04
     c2a:	28 c0       	rjmp	.+80     	; 0xc7c <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	80 70       	andi	r24, 0x00	; 0
     c32:	97 70       	andi	r25, 0x07	; 7
     c34:	88 0f       	add	r24, r24
     c36:	89 2f       	mov	r24, r25
     c38:	88 1f       	adc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	91 95       	neg	r25
     c3e:	80 6a       	ori	r24, 0xA0	; 160
     c40:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c44:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     c48:	88 31       	cpi	r24, 0x18	; 24
     c4a:	11 f0       	breq	.+4      	; 0xc50 <EEPROM_writeByte+0x46>
        return ERROR;
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	16 c0       	rjmp	.+44     	; 0xc7c <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c56:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     c5a:	88 32       	cpi	r24, 0x28	; 40
     c5c:	11 f0       	breq	.+4      	; 0xc62 <EEPROM_writeByte+0x58>
        return ERROR;
     c5e:	1c 82       	std	Y+4, r1	; 0x04
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c68:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     c6c:	88 32       	cpi	r24, 0x28	; 40
     c6e:	11 f0       	breq	.+4      	; 0xc74 <EEPROM_writeByte+0x6a>
        return ERROR;
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c74:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_stop>

    return SUCCESS;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8c 83       	std	Y+4, r24	; 0x04
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <EEPROM_readByte+0x6>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <EEPROM_readByte+0x8>
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	7c 83       	std	Y+4, r23	; 0x04
     ca0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ca2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_start>
    if (TWI_getStatus() != TW_START)
     ca6:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     caa:	88 30       	cpi	r24, 0x08	; 8
     cac:	11 f0       	breq	.+4      	; 0xcb2 <EEPROM_readByte+0x26>
        return ERROR;
     cae:	1d 82       	std	Y+5, r1	; 0x05
     cb0:	44 c0       	rjmp	.+136    	; 0xd3a <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	80 70       	andi	r24, 0x00	; 0
     cb8:	97 70       	andi	r25, 0x07	; 7
     cba:	88 0f       	add	r24, r24
     cbc:	89 2f       	mov	r24, r25
     cbe:	88 1f       	adc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	91 95       	neg	r25
     cc4:	80 6a       	ori	r24, 0xA0	; 160
     cc6:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     cca:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     cce:	88 31       	cpi	r24, 0x18	; 24
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <EEPROM_readByte+0x4a>
        return ERROR;
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	32 c0       	rjmp	.+100    	; 0xd3a <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cdc:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     ce0:	88 32       	cpi	r24, 0x28	; 40
     ce2:	11 f0       	breq	.+4      	; 0xce8 <EEPROM_readByte+0x5c>
        return ERROR;
     ce4:	1d 82       	std	Y+5, r1	; 0x05
     ce6:	29 c0       	rjmp	.+82     	; 0xd3a <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     ce8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     cec:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     cf0:	80 31       	cpi	r24, 0x10	; 16
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <EEPROM_readByte+0x6c>
        return ERROR;
     cf4:	1d 82       	std	Y+5, r1	; 0x05
     cf6:	21 c0       	rjmp	.+66     	; 0xd3a <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	80 70       	andi	r24, 0x00	; 0
     cfe:	97 70       	andi	r25, 0x07	; 7
     d00:	88 0f       	add	r24, r24
     d02:	89 2f       	mov	r24, r25
     d04:	88 1f       	adc	r24, r24
     d06:	99 0b       	sbc	r25, r25
     d08:	91 95       	neg	r25
     d0a:	81 6a       	ori	r24, 0xA1	; 161
     d0c:	0e 94 13 07 	call	0xe26	; 0xe26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d10:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     d14:	80 34       	cpi	r24, 0x40	; 64
     d16:	11 f0       	breq	.+4      	; 0xd1c <EEPROM_readByte+0x90>
        return ERROR;
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     d1c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <TWI_readWithNACK>
     d20:	eb 81       	ldd	r30, Y+3	; 0x03
     d22:	fc 81       	ldd	r31, Y+4	; 0x04
     d24:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d26:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_getStatus>
     d2a:	88 35       	cpi	r24, 0x58	; 88
     d2c:	11 f0       	breq	.+4      	; 0xd32 <EEPROM_readByte+0xa6>
        return ERROR;
     d2e:	1d 82       	std	Y+5, r1	; 0x05
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d32:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_stop>
    return SUCCESS;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <Buzzer_ON>:
 *       				Functions Definitions		  			 		  	   *
 *******************************************************************************/

/* Public (Shared) Functions */
void Buzzer_ON(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_DIR,BUZZER_PIN);
     d54:	aa e3       	ldi	r26, 0x3A	; 58
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ea e3       	ldi	r30, 0x3A	; 58
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	8c 93       	st	X, r24
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
     d62:	ab e3       	ldi	r26, 0x3B	; 59
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	eb e3       	ldi	r30, 0x3B	; 59
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	8c 93       	st	X, r24
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <Buzzer_OFF>:

void Buzzer_OFF(void)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
     d7e:	ab e3       	ldi	r26, 0x3B	; 59
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	eb e3       	ldi	r30, 0x3B	; 59
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	8c 93       	st	X, r24
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TWI_init>:
 * Description : Function to initialize the TWI driver
 * 	1. Set the required Baud Rate.
 * 	2. Set the required Address if i am a slave.
 */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <TWI_init+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
	if((Config_Ptr->Baud)==RATE2) /* 400 kbps mode*/
     da0:	e9 81       	ldd	r30, Y+1	; 0x01
     da2:	fa 81       	ldd	r31, Y+2	; 0x02
     da4:	80 81       	ld	r24, Z
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	41 f4       	brne	.+16     	; 0xdba <TWI_init+0x28>
	{
	    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	    TWBR = 0x02;
     daa:	e0 e2       	ldi	r30, 0x20	; 32
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	80 83       	st	Z, r24
		TWSR = 0x00;
     db2:	e1 e2       	ldi	r30, 0x21	; 33
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
     db8:	0c c0       	rjmp	.+24     	; 0xdd2 <TWI_init+0x40>
	}
	else if((Config_Ptr->Baud)==RATE1) /* 100 kbps mode*/
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <TWI_init+0x40>
	{
	    /* Bit Rate: 100.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	    TWBR = 0x20;
     dc4:	e0 e2       	ldi	r30, 0x20	; 32
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 e2       	ldi	r24, 0x20	; 32
     dca:	80 83       	st	Z, r24
		TWSR = 0x00;
     dcc:	e1 e2       	ldi	r30, 0x21	; 33
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	10 82       	st	Z, r1
	}
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->Address);
     dd2:	a2 e2       	ldi	r26, 0x22	; 34
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     dde:	e6 e5       	ldi	r30, 0x56	; 86
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	80 83       	st	Z, r24
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TWI_start>:

void TWI_start(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     df8:	e6 e5       	ldi	r30, 0x56	; 86
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	84 ea       	ldi	r24, 0xA4	; 164
     dfe:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e00:	e6 e5       	ldi	r30, 0x56	; 86
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	dc f7       	brge	.-10     	; 0xe00 <TWI_start+0x10>
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <TWI_stop>:

void TWI_stop(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	84 e9       	ldi	r24, 0x94	; 148
     e1e:	80 83       	st	Z, r24
}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <TWI_write>:

void TWI_write(uint8 data)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e32:	e3 e2       	ldi	r30, 0x23	; 35
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e3a:	e6 e5       	ldi	r30, 0x56	; 86
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	84 e8       	ldi	r24, 0x84	; 132
     e40:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e42:	e6 e5       	ldi	r30, 0x56	; 86
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 23       	and	r24, r24
     e4a:	dc f7       	brge	.-10     	; 0xe42 <TWI_write+0x1c>
}
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e5c:	e6 e5       	ldi	r30, 0x56	; 86
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	84 ec       	ldi	r24, 0xC4	; 196
     e62:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e64:	e6 e5       	ldi	r30, 0x56	; 86
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	dc f7       	brge	.-10     	; 0xe64 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     e6e:	e3 e2       	ldi	r30, 0x23	; 35
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	84 e8       	ldi	r24, 0x84	; 132
     e88:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e8a:	e6 e5       	ldi	r30, 0x56	; 86
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 23       	and	r24, r24
     e92:	dc f7       	brge	.-10     	; 0xe8a <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e94:	e3 e2       	ldi	r30, 0x23	; 35
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     eaa:	e1 e2       	ldi	r30, 0x21	; 33
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	89 83       	std	Y+1, r24	; 0x01
    return status;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <main>:
void send_pass(void);
void buzzer_on(void);
void motor_on(void);

int main(void)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	2f 97       	sbiw	r28, 0x0f	; 15
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
	/* Initialization */
	/*******************
	 *     Variables   *
	 *******************/
	uint8 receivedByte = 0 ; /* variable used to store data received from UART */
     ed2:	19 82       	std	Y+1, r1	; 0x01

	/*******************
	 *     DC Motor    *
	 *******************/
	DCMotor_init();
     ed4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DCMotor_init>
	/*******************
	 *       I2C       *
	 *******************/
	TWI_ConfigType TWI_Config = {RATE2,0x05};
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	8b 83       	std	Y+3, r24	; 0x03
	TWI_init(&TWI_Config);
     ee0:	ce 01       	movw	r24, r28
     ee2:	02 96       	adiw	r24, 0x02	; 2
     ee4:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_init>

	/*******************
	 *    	 UART      *
	 *******************/
	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {EIGHT_Bit,Disabled,ONE_Bit,9600};
     ee8:	ce 01       	movw	r24, r28
     eea:	04 96       	adiw	r24, 0x04	; 4
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	8b 87       	std	Y+11, r24	; 0x0b
     ef0:	ef e6       	ldi	r30, 0x6F	; 111
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	fe 87       	std	Y+14, r31	; 0x0e
     ef6:	ed 87       	std	Y+13, r30	; 0x0d
     ef8:	f7 e0       	ldi	r31, 0x07	; 7
     efa:	ff 87       	std	Y+15, r31	; 0x0f
     efc:	ed 85       	ldd	r30, Y+13	; 0x0d
     efe:	fe 85       	ldd	r31, Y+14	; 0x0e
     f00:	00 80       	ld	r0, Z
     f02:	8d 85       	ldd	r24, Y+13	; 0x0d
     f04:	9e 85       	ldd	r25, Y+14	; 0x0e
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9e 87       	std	Y+14, r25	; 0x0e
     f0a:	8d 87       	std	Y+13, r24	; 0x0d
     f0c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f0e:	fc 85       	ldd	r31, Y+12	; 0x0c
     f10:	00 82       	st	Z, r0
     f12:	8b 85       	ldd	r24, Y+11	; 0x0b
     f14:	9c 85       	ldd	r25, Y+12	; 0x0c
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	9c 87       	std	Y+12, r25	; 0x0c
     f1a:	8b 87       	std	Y+11, r24	; 0x0b
     f1c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1e:	91 50       	subi	r25, 0x01	; 1
     f20:	9f 87       	std	Y+15, r25	; 0x0f
     f22:	ef 85       	ldd	r30, Y+15	; 0x0f
     f24:	ee 23       	and	r30, r30
     f26:	51 f7       	brne	.-44     	; 0xefc <main+0x3e>
	UART_init(&UART_Config);
     f28:	ce 01       	movw	r24, r28
     f2a:	04 96       	adiw	r24, 0x04	; 4
     f2c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_init>
	while(UART_recieveByte() != M1_READY){} // wait until MC1 is ready
     f30:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_recieveByte>
     f34:	81 31       	cpi	r24, 0x11	; 17
     f36:	e1 f7       	brne	.-8      	; 0xf30 <main+0x72>
	UART_sendByte(M2_READY); // MC2 is ready
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
	/*******************
	 *    	TIMER      *
	 *******************/
	Timer0_setCallBack(Timer0_Callbackfunc);
     f3e:	80 ec       	ldi	r24, 0xC0	; 192
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <Timer0_setCallBack>
		 * Command 2 : 0x41 -> If its the first time , write the new password to the E2PROM
		 * Command 3 : 0x42 -> Sends the password the MC in case its not the first time
		 * Command 4 : 0x43 -> Turns on the buzzer in case the user wrote the wrong password
		 * Command 5 : 0x44 -> Turns on the door(motor) in case the user wrote the right password
		 * */
		receivedByte = UART_recieveByte();
     f46:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_recieveByte>
     f4a:	89 83       	std	Y+1, r24	; 0x01
		if(receivedByte == COMMAND_1)
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	80 34       	cpi	r24, 0x40	; 64
     f50:	11 f4       	brne	.+4      	; 0xf56 <main+0x98>
		{
			check_first_time();
     f52:	0e 94 f7 07 	call	0xfee	; 0xfee <check_first_time>
		}
		if(receivedByte == COMMAND_2)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	81 34       	cpi	r24, 0x41	; 65
     f5a:	11 f4       	brne	.+4      	; 0xf60 <main+0xa2>
		{
			write_first_time();
     f5c:	0e 94 13 08 	call	0x1026	; 0x1026 <write_first_time>
		}
		if(receivedByte == COMMAND_3)
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	82 34       	cpi	r24, 0x42	; 66
     f64:	11 f4       	brne	.+4      	; 0xf6a <main+0xac>
		{
			send_pass();
     f66:	0e 94 46 09 	call	0x128c	; 0x128c <send_pass>
		}
		if(receivedByte == COMMAND_4)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	83 34       	cpi	r24, 0x43	; 67
     f6e:	11 f4       	brne	.+4      	; 0xf74 <main+0xb6>
		{
			buzzer_on();
     f70:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <buzzer_on>
		}
		if(receivedByte == COMMAND_5)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	84 34       	cpi	r24, 0x44	; 68
     f78:	31 f7       	brne	.-52     	; 0xf46 <main+0x88>
		{
			motor_on();
     f7a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <motor_on>
     f7e:	e3 cf       	rjmp	.-58     	; 0xf46 <main+0x88>

00000f80 <Timer0_Callbackfunc>:
	}
	return 0;
}

void Timer0_Callbackfunc(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	/* We are using F_CPU = 8MHz and prescaler = 1024 so one second is 30 ticks */
	tick_buzzer ++ ;
     f88:	80 91 76 00 	lds	r24, 0x0076
     f8c:	90 91 77 00 	lds	r25, 0x0077
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	90 93 77 00 	sts	0x0077, r25
     f96:	80 93 76 00 	sts	0x0076, r24
	tick_motor ++ ;
     f9a:	80 91 78 00 	lds	r24, 0x0078
     f9e:	90 91 79 00 	lds	r25, 0x0079
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	90 93 79 00 	sts	0x0079, r25
     fa8:	80 93 78 00 	sts	0x0078, r24
	if(tick_motor == TIMER_15_SECS) /* for counting 15 seconds */
     fac:	80 91 78 00 	lds	r24, 0x0078
     fb0:	90 91 79 00 	lds	r25, 0x0079
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	89 3c       	cpi	r24, 0xC9	; 201
     fb8:	92 07       	cpc	r25, r18
     fba:	39 f4       	brne	.+14     	; 0xfca <Timer0_Callbackfunc+0x4a>
	{
		g_flag_motor = 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 7b 00 	sts	0x007B, r24
		tick_motor = 0;
     fc2:	10 92 79 00 	sts	0x0079, r1
     fc6:	10 92 78 00 	sts	0x0078, r1
	}
	if(tick_buzzer == TIMER_60_SECS) /* for counting 60 seconds */
     fca:	80 91 76 00 	lds	r24, 0x0076
     fce:	90 91 77 00 	lds	r25, 0x0077
     fd2:	27 e0       	ldi	r18, 0x07	; 7
     fd4:	87 32       	cpi	r24, 0x27	; 39
     fd6:	92 07       	cpc	r25, r18
     fd8:	39 f4       	brne	.+14     	; 0xfe8 <Timer0_Callbackfunc+0x68>
	{
		g_flag_buzzer = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 7a 00 	sts	0x007A, r24
		tick_buzzer = 0;
     fe0:	10 92 77 00 	sts	0x0077, r1
     fe4:	10 92 76 00 	sts	0x0076, r1
	}
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <check_first_time>:

void check_first_time(void)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	uint8 EEPROM_val = 0; //variable used to store data from EE2PROM
     ff8:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readByte(0x0300, &EEPROM_val);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	9e 01       	movw	r18, r28
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 46 06 	call	0xc8c	; 0xc8c <EEPROM_readByte>
	if(EEPROM_val == E2PROM_FIRST_TIME) /* 0x25 means i wrote there before */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	85 32       	cpi	r24, 0x25	; 37
    100e:	21 f4       	brne	.+8      	; 0x1018 <check_first_time+0x2a>
	{
		UART_sendByte(APP_IS_INITIALIZED); /* there is value inside */
    1010:	8a ef       	ldi	r24, 0xFA	; 250
    1012:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
    1016:	03 c0       	rjmp	.+6      	; 0x101e <check_first_time+0x30>
	}
	else
	{
		UART_sendByte(APP_IS_NOT_INITIALIZED); /* there is no value inside */
    1018:	85 ef       	ldi	r24, 0xF5	; 245
    101a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
	}
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <write_first_time>:

void write_first_time(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	a1 97       	sbiw	r28, 0x21	; 33
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
	uint8 receivedByte;
	EEPROM_writeByte(0x0300, E2PROM_FIRST_TIME);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	65 e2       	ldi	r22, 0x25	; 37
    1040:	0e 94 05 06 	call	0xc0a	; 0xc0a <EEPROM_writeByte>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e2       	ldi	r26, 0x20	; 32
    104a:	b1 e4       	ldi	r27, 0x41	; 65
    104c:	89 8f       	std	Y+25, r24	; 0x19
    104e:	9a 8f       	std	Y+26, r25	; 0x1a
    1050:	ab 8f       	std	Y+27, r26	; 0x1b
    1052:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1054:	69 8d       	ldd	r22, Y+25	; 0x19
    1056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	4a ef       	ldi	r20, 0xFA	; 250
    1062:	54 e4       	ldi	r21, 0x44	; 68
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	8d 8b       	std	Y+21, r24	; 0x15
    106e:	9e 8b       	std	Y+22, r25	; 0x16
    1070:	af 8b       	std	Y+23, r26	; 0x17
    1072:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1074:	6d 89       	ldd	r22, Y+21	; 0x15
    1076:	7e 89       	ldd	r23, Y+22	; 0x16
    1078:	8f 89       	ldd	r24, Y+23	; 0x17
    107a:	98 8d       	ldd	r25, Y+24	; 0x18
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1088:	88 23       	and	r24, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <write_first_time+0x70>
		__ticks = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9c 8b       	std	Y+20, r25	; 0x14
    1092:	8b 8b       	std	Y+19, r24	; 0x13
    1094:	3f c0       	rjmp	.+126    	; 0x1114 <write_first_time+0xee>
	else if (__tmp > 65535)
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	4f e7       	ldi	r20, 0x7F	; 127
    10a4:	57 e4       	ldi	r21, 0x47	; 71
    10a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	4c f5       	brge	.+82     	; 0x1100 <write_first_time+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ae:	69 8d       	ldd	r22, Y+25	; 0x19
    10b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e2       	ldi	r20, 0x20	; 32
    10bc:	51 e4       	ldi	r21, 0x41	; 65
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9c 8b       	std	Y+20, r25	; 0x14
    10d4:	8b 8b       	std	Y+19, r24	; 0x13
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <write_first_time+0xd0>
    10d8:	88 ec       	ldi	r24, 0xC8	; 200
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9a 8b       	std	Y+18, r25	; 0x12
    10de:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10e0:	89 89       	ldd	r24, Y+17	; 0x11
    10e2:	9a 89       	ldd	r25, Y+18	; 0x12
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <write_first_time+0xbe>
    10e8:	9a 8b       	std	Y+18, r25	; 0x12
    10ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ec:	8b 89       	ldd	r24, Y+19	; 0x13
    10ee:	9c 89       	ldd	r25, Y+20	; 0x14
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	9c 8b       	std	Y+20, r25	; 0x14
    10f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	69 f7       	brne	.-38     	; 0x10d8 <write_first_time+0xb2>
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <write_first_time+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1100:	6d 89       	ldd	r22, Y+21	; 0x15
    1102:	7e 89       	ldd	r23, Y+22	; 0x16
    1104:	8f 89       	ldd	r24, Y+23	; 0x17
    1106:	98 8d       	ldd	r25, Y+24	; 0x18
    1108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9c 8b       	std	Y+20, r25	; 0x14
    1112:	8b 8b       	std	Y+19, r24	; 0x13
    1114:	8b 89       	ldd	r24, Y+19	; 0x13
    1116:	9c 89       	ldd	r25, Y+20	; 0x14
    1118:	98 8b       	std	Y+16, r25	; 0x10
    111a:	8f 87       	std	Y+15, r24	; 0x0f
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	98 89       	ldd	r25, Y+16	; 0x10
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <write_first_time+0xfa>
    1124:	98 8b       	std	Y+16, r25	; 0x10
    1126:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	for(int i = 0 ; i < 5 ; i++)
    1128:	18 a2       	std	Y+32, r1	; 0x20
    112a:	1f 8e       	std	Y+31, r1	; 0x1f
    112c:	12 c0       	rjmp	.+36     	; 0x1152 <write_first_time+0x12c>
	{
		receivedByte = UART_recieveByte();
    112e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_recieveByte>
    1132:	89 a3       	std	Y+33, r24	; 0x21
		g_password_array[i] = receivedByte;
    1134:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1136:	98 a1       	ldd	r25, Y+32	; 0x20
    1138:	fc 01       	movw	r30, r24
    113a:	e4 58       	subi	r30, 0x84	; 132
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	89 a1       	ldd	r24, Y+33	; 0x21
    1140:	80 83       	st	Z, r24
		UART_sendByte(M2_READY);
    1142:	80 e1       	ldi	r24, 0x10	; 16
    1144:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
void write_first_time(void)
{
	uint8 receivedByte;
	EEPROM_writeByte(0x0300, E2PROM_FIRST_TIME);
	_delay_ms(10);
	for(int i = 0 ; i < 5 ; i++)
    1148:	8f 8d       	ldd	r24, Y+31	; 0x1f
    114a:	98 a1       	ldd	r25, Y+32	; 0x20
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	98 a3       	std	Y+32, r25	; 0x20
    1150:	8f 8f       	std	Y+31, r24	; 0x1f
    1152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1154:	98 a1       	ldd	r25, Y+32	; 0x20
    1156:	85 30       	cpi	r24, 0x05	; 5
    1158:	91 05       	cpc	r25, r1
    115a:	4c f3       	brlt	.-46     	; 0x112e <write_first_time+0x108>
	{
		receivedByte = UART_recieveByte();
		g_password_array[i] = receivedByte;
		UART_sendByte(M2_READY);
	}
	for(int i = 0 ; i < 5 ; i++)
    115c:	1e 8e       	std	Y+30, r1	; 0x1e
    115e:	1d 8e       	std	Y+29, r1	; 0x1d
    1160:	86 c0       	rjmp	.+268    	; 0x126e <write_first_time+0x248>
	{
		EEPROM_writeByte(0x0301+i, g_password_array[i]);
    1162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1164:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	9c 4f       	sbci	r25, 0xFC	; 252
    116a:	9c 01       	movw	r18, r24
    116c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1170:	fc 01       	movw	r30, r24
    1172:	e4 58       	subi	r30, 0x84	; 132
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	40 81       	ld	r20, Z
    1178:	c9 01       	movw	r24, r18
    117a:	64 2f       	mov	r22, r20
    117c:	0e 94 05 06 	call	0xc0a	; 0xc0a <EEPROM_writeByte>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 e2       	ldi	r26, 0x20	; 32
    1186:	b1 e4       	ldi	r27, 0x41	; 65
    1188:	8b 87       	std	Y+11, r24	; 0x0b
    118a:	9c 87       	std	Y+12, r25	; 0x0c
    118c:	ad 87       	std	Y+13, r26	; 0x0d
    118e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1190:	6b 85       	ldd	r22, Y+11	; 0x0b
    1192:	7c 85       	ldd	r23, Y+12	; 0x0c
    1194:	8d 85       	ldd	r24, Y+13	; 0x0d
    1196:	9e 85       	ldd	r25, Y+14	; 0x0e
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a ef       	ldi	r20, 0xFA	; 250
    119e:	54 e4       	ldi	r21, 0x44	; 68
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	8f 83       	std	Y+7, r24	; 0x07
    11aa:	98 87       	std	Y+8, r25	; 0x08
    11ac:	a9 87       	std	Y+9, r26	; 0x09
    11ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b0:	6f 81       	ldd	r22, Y+7	; 0x07
    11b2:	78 85       	ldd	r23, Y+8	; 0x08
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e8       	ldi	r20, 0x80	; 128
    11be:	5f e3       	ldi	r21, 0x3F	; 63
    11c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c4:	88 23       	and	r24, r24
    11c6:	2c f4       	brge	.+10     	; 0x11d2 <write_first_time+0x1ac>
		__ticks = 1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	3f c0       	rjmp	.+126    	; 0x1250 <write_first_time+0x22a>
	else if (__tmp > 65535)
    11d2:	6f 81       	ldd	r22, Y+7	; 0x07
    11d4:	78 85       	ldd	r23, Y+8	; 0x08
    11d6:	89 85       	ldd	r24, Y+9	; 0x09
    11d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	3f ef       	ldi	r19, 0xFF	; 255
    11de:	4f e7       	ldi	r20, 0x7F	; 127
    11e0:	57 e4       	ldi	r21, 0x47	; 71
    11e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e6:	18 16       	cp	r1, r24
    11e8:	4c f5       	brge	.+82     	; 0x123c <write_first_time+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e2       	ldi	r20, 0x20	; 32
    11f8:	51 e4       	ldi	r21, 0x41	; 65
    11fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	bc 01       	movw	r22, r24
    1204:	cd 01       	movw	r24, r26
    1206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	0f c0       	rjmp	.+30     	; 0x1232 <write_first_time+0x20c>
    1214:	88 ec       	ldi	r24, 0xC8	; 200
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <write_first_time+0x1fa>
    1224:	9c 83       	std	Y+4, r25	; 0x04
    1226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	69 f7       	brne	.-38     	; 0x1214 <write_first_time+0x1ee>
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <write_first_time+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123c:	6f 81       	ldd	r22, Y+7	; 0x07
    123e:	78 85       	ldd	r23, Y+8	; 0x08
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	9a 85       	ldd	r25, Y+10	; 0x0a
    1244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <write_first_time+0x236>
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
	{
		receivedByte = UART_recieveByte();
		g_password_array[i] = receivedByte;
		UART_sendByte(M2_READY);
	}
	for(int i = 0 ; i < 5 ; i++)
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	9e 8f       	std	Y+30, r25	; 0x1e
    126c:	8d 8f       	std	Y+29, r24	; 0x1d
    126e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	91 05       	cpc	r25, r1
    1276:	0c f4       	brge	.+2      	; 0x127a <write_first_time+0x254>
    1278:	74 cf       	rjmp	.-280    	; 0x1162 <write_first_time+0x13c>
	{
		EEPROM_writeByte(0x0301+i, g_password_array[i]);
		_delay_ms(10);
	}
}
    127a:	a1 96       	adiw	r28, 0x21	; 33
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <send_pass>:

void send_pass(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	a0 97       	sbiw	r28, 0x20	; 32
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	aa e7       	ldi	r26, 0x7A	; 122
    12a6:	b4 e4       	ldi	r27, 0x44	; 68
    12a8:	89 8f       	std	Y+25, r24	; 0x19
    12aa:	9a 8f       	std	Y+26, r25	; 0x1a
    12ac:	ab 8f       	std	Y+27, r26	; 0x1b
    12ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b0:	69 8d       	ldd	r22, Y+25	; 0x19
    12b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	4a ef       	ldi	r20, 0xFA	; 250
    12be:	54 e4       	ldi	r21, 0x44	; 68
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8d 8b       	std	Y+21, r24	; 0x15
    12ca:	9e 8b       	std	Y+22, r25	; 0x16
    12cc:	af 8b       	std	Y+23, r26	; 0x17
    12ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12d0:	6d 89       	ldd	r22, Y+21	; 0x15
    12d2:	7e 89       	ldd	r23, Y+22	; 0x16
    12d4:	8f 89       	ldd	r24, Y+23	; 0x17
    12d6:	98 8d       	ldd	r25, Y+24	; 0x18
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <send_pass+0x66>
		__ticks = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c 8b       	std	Y+20, r25	; 0x14
    12ee:	8b 8b       	std	Y+19, r24	; 0x13
    12f0:	3f c0       	rjmp	.+126    	; 0x1370 <send_pass+0xe4>
	else if (__tmp > 65535)
    12f2:	6d 89       	ldd	r22, Y+21	; 0x15
    12f4:	7e 89       	ldd	r23, Y+22	; 0x16
    12f6:	8f 89       	ldd	r24, Y+23	; 0x17
    12f8:	98 8d       	ldd	r25, Y+24	; 0x18
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	3f ef       	ldi	r19, 0xFF	; 255
    12fe:	4f e7       	ldi	r20, 0x7F	; 127
    1300:	57 e4       	ldi	r21, 0x47	; 71
    1302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1306:	18 16       	cp	r1, r24
    1308:	4c f5       	brge	.+82     	; 0x135c <send_pass+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130a:	69 8d       	ldd	r22, Y+25	; 0x19
    130c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	51 e4       	ldi	r21, 0x41	; 65
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9c 8b       	std	Y+20, r25	; 0x14
    1330:	8b 8b       	std	Y+19, r24	; 0x13
    1332:	0f c0       	rjmp	.+30     	; 0x1352 <send_pass+0xc6>
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9a 8b       	std	Y+18, r25	; 0x12
    133a:	89 8b       	std	Y+17, r24	; 0x11
    133c:	89 89       	ldd	r24, Y+17	; 0x11
    133e:	9a 89       	ldd	r25, Y+18	; 0x12
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <send_pass+0xb4>
    1344:	9a 8b       	std	Y+18, r25	; 0x12
    1346:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1348:	8b 89       	ldd	r24, Y+19	; 0x13
    134a:	9c 89       	ldd	r25, Y+20	; 0x14
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	9c 8b       	std	Y+20, r25	; 0x14
    1350:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	8b 89       	ldd	r24, Y+19	; 0x13
    1354:	9c 89       	ldd	r25, Y+20	; 0x14
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	69 f7       	brne	.-38     	; 0x1334 <send_pass+0xa8>
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <send_pass+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
    1370:	8b 89       	ldd	r24, Y+19	; 0x13
    1372:	9c 89       	ldd	r25, Y+20	; 0x14
    1374:	98 8b       	std	Y+16, r25	; 0x10
    1376:	8f 87       	std	Y+15, r24	; 0x0f
    1378:	8f 85       	ldd	r24, Y+15	; 0x0f
    137a:	98 89       	ldd	r25, Y+16	; 0x10
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <send_pass+0xf0>
    1380:	98 8b       	std	Y+16, r25	; 0x10
    1382:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	for(int i = 0 ; i < 5 ; i++)
    1384:	18 a2       	std	Y+32, r1	; 0x20
    1386:	1f 8e       	std	Y+31, r1	; 0x1f
    1388:	85 c0       	rjmp	.+266    	; 0x1494 <send_pass+0x208>
	{
		EEPROM_readByte((0x0301+i), &g_password_array[i]);
    138a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    138c:	98 a1       	ldd	r25, Y+32	; 0x20
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	9c 4f       	sbci	r25, 0xFC	; 252
    1392:	ac 01       	movw	r20, r24
    1394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1396:	98 a1       	ldd	r25, Y+32	; 0x20
    1398:	9c 01       	movw	r18, r24
    139a:	24 58       	subi	r18, 0x84	; 132
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	0e 94 46 06 	call	0xc8c	; 0xc8c <EEPROM_readByte>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e2       	ldi	r26, 0x20	; 32
    13ac:	b1 e4       	ldi	r27, 0x41	; 65
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a ef       	ldi	r20, 0xFA	; 250
    13c4:	54 e4       	ldi	r21, 0x44	; 68
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8f 83       	std	Y+7, r24	; 0x07
    13d0:	98 87       	std	Y+8, r25	; 0x08
    13d2:	a9 87       	std	Y+9, r26	; 0x09
    13d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <send_pass+0x16c>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <send_pass+0x1ea>
	else if (__tmp > 65535)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <send_pass+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <send_pass+0x1cc>
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <send_pass+0x1ba>
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <send_pass+0x1ae>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <send_pass+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <send_pass+0x1f6>
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
}

void send_pass(void)
{
	_delay_ms(1000);
	for(int i = 0 ; i < 5 ; i++)
    148a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    148c:	98 a1       	ldd	r25, Y+32	; 0x20
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	98 a3       	std	Y+32, r25	; 0x20
    1492:	8f 8f       	std	Y+31, r24	; 0x1f
    1494:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1496:	98 a1       	ldd	r25, Y+32	; 0x20
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	91 05       	cpc	r25, r1
    149c:	0c f4       	brge	.+2      	; 0x14a0 <send_pass+0x214>
    149e:	75 cf       	rjmp	.-278    	; 0x138a <send_pass+0xfe>
	{
		EEPROM_readByte((0x0301+i), &g_password_array[i]);
		_delay_ms(10);
	}
	for(int i = 0 ; i < 5 ; i++)
    14a0:	1e 8e       	std	Y+30, r1	; 0x1e
    14a2:	1d 8e       	std	Y+29, r1	; 0x1d
    14a4:	11 c0       	rjmp	.+34     	; 0x14c8 <send_pass+0x23c>
	{
		UART_sendByte(g_password_array[i]);
    14a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14aa:	fc 01       	movw	r30, r24
    14ac:	e4 58       	subi	r30, 0x84	; 132
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
		while(UART_recieveByte() != M1_READY){} // wait until MC2 is ready
    14b6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_recieveByte>
    14ba:	81 31       	cpi	r24, 0x11	; 17
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <send_pass+0x22a>
	for(int i = 0 ; i < 5 ; i++)
	{
		EEPROM_readByte((0x0301+i), &g_password_array[i]);
		_delay_ms(10);
	}
	for(int i = 0 ; i < 5 ; i++)
    14be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	9e 8f       	std	Y+30, r25	; 0x1e
    14c6:	8d 8f       	std	Y+29, r24	; 0x1d
    14c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14cc:	85 30       	cpi	r24, 0x05	; 5
    14ce:	91 05       	cpc	r25, r1
    14d0:	54 f3       	brlt	.-44     	; 0x14a6 <send_pass+0x21a>
	{
		UART_sendByte(g_password_array[i]);
		while(UART_recieveByte() != M1_READY){} // wait until MC2 is ready
	}
}
    14d2:	a0 96       	adiw	r28, 0x20	; 32
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <buzzer_on>:

void buzzer_on(void)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    14ec:	af e5       	ldi	r26, 0x5F	; 95
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ef e5       	ldi	r30, 0x5F	; 95
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	8c 93       	st	X, r24
	g_flag_buzzer = 0; /* Clear flag for next loop */
    14fa:	10 92 7a 00 	sts	0x007A, r1
	Buzzer_ON();
    14fe:	0e 94 a6 06 	call	0xd4c	; 0xd4c <Buzzer_ON>
	Timer_init(&Timer_Config);
    1502:	88 e6       	ldi	r24, 0x68	; 104
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Timer_init>
	while(g_flag_buzzer != 1); /* wait till flag is set */
    150a:	80 91 7a 00 	lds	r24, 0x007A
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	e1 f7       	brne	.-8      	; 0x150a <buzzer_on+0x26>
	g_flag_buzzer = 0; /* Clear flag for next loop */
    1512:	10 92 7a 00 	sts	0x007A, r1
	Buzzer_OFF();
    1516:	0e 94 bb 06 	call	0xd76	; 0xd76 <Buzzer_OFF>
	UART_sendByte(BUZZER_FINISH_FLAG);
    151a:	88 ef       	ldi	r24, 0xF8	; 248
    151c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
	SREG &= ~(1<<7);
    1520:	af e5       	ldi	r26, 0x5F	; 95
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ef e5       	ldi	r30, 0x5F	; 95
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 77       	andi	r24, 0x7F	; 127
    152c:	8c 93       	st	X, r24
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <motor_on>:

void motor_on(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    153c:	af e5       	ldi	r26, 0x5F	; 95
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ef e5       	ldi	r30, 0x5F	; 95
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 68       	ori	r24, 0x80	; 128
    1548:	8c 93       	st	X, r24
	g_flag_motor = 0; /* Clear flag */
    154a:	10 92 7b 00 	sts	0x007B, r1
	DCMotor_clockwise();
    154e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DCMotor_clockwise>
	Timer_init(&Timer_Config);
    1552:	88 e6       	ldi	r24, 0x68	; 104
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Timer_init>
	while(g_flag_motor != 1); /* wait till flag is set */
    155a:	80 91 7b 00 	lds	r24, 0x007B
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	e1 f7       	brne	.-8      	; 0x155a <motor_on+0x26>
	g_flag_motor = 0; /* Clear flag for next loop */
    1562:	10 92 7b 00 	sts	0x007B, r1

	DCMotor_anti_clockwise();
    1566:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DCMotor_anti_clockwise>
	Timer_init(&Timer_Config);
    156a:	88 e6       	ldi	r24, 0x68	; 104
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Timer_init>
	while(g_flag_motor != 1); /* wait till flag is set */
    1572:	80 91 7b 00 	lds	r24, 0x007B
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	e1 f7       	brne	.-8      	; 0x1572 <motor_on+0x3e>
	g_flag_motor = 0; /* Clear flag for next loop */
    157a:	10 92 7b 00 	sts	0x007B, r1
	DCMotor_stop();
    157e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DCMotor_stop>
	UART_sendByte(MOTOR_FINISH_FLAG);
    1582:	89 ef       	ldi	r24, 0xF9	; 249
    1584:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
	SREG &= ~(1<<7);
    1588:	af e5       	ldi	r26, 0x5F	; 95
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e5       	ldi	r30, 0x5F	; 95
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 77       	andi	r24, 0x7F	; 127
    1594:	8c 93       	st	X, r24
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* Timer0 Overflow ISR */
ISR(TIMER0_OVF_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    15c6:	80 91 81 00 	lds	r24, 0x0081
    15ca:	90 91 82 00 	lds	r25, 0x0082
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	29 f0       	breq	.+10     	; 0x15dc <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer0)(); /* another method to call the function using pointer to function g_callBackPtrTimer0(); */
    15d2:	e0 91 81 00 	lds	r30, 0x0081
    15d6:	f0 91 82 00 	lds	r31, 0x0082
    15da:	09 95       	icall
	}
	TIFR  |= (1<<TOV0); // Clear MIF (Interrupt Flag)
    15dc:	a8 e5       	ldi	r26, 0x58	; 88
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e8 e5       	ldi	r30, 0x58	; 88
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	8c 93       	st	X, r24
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_19>:
/* Timer0 Compare ISR */
ISR(TIMER0_COMP_vect)
{
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    163a:	80 91 81 00 	lds	r24, 0x0081
    163e:	90 91 82 00 	lds	r25, 0x0082
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	29 f0       	breq	.+10     	; 0x1650 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer0)(); /* another method to call the function using pointer to function g_callBackPtrTimer0(); */
    1646:	e0 91 81 00 	lds	r30, 0x0081
    164a:	f0 91 82 00 	lds	r31, 0x0082
    164e:	09 95       	icall
	}
	TIFR  |= (1<<OCF0); // Clear MIF (Interrupt Flag)
    1650:	a8 e5       	ldi	r26, 0x58	; 88
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e5       	ldi	r30, 0x58	; 88
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	82 60       	ori	r24, 0x02	; 2
    165c:	8c 93       	st	X, r24
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_8>:
/* Timer1 Overflow ISR */
ISR(TIMER1_OVF_vect)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    16ae:	80 91 83 00 	lds	r24, 0x0083
    16b2:	90 91 84 00 	lds	r25, 0x0084
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	29 f0       	breq	.+10     	; 0x16c4 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer1)(); /* another method to call the function using pointer to function g_callBackPtrTimer1(); */
    16ba:	e0 91 83 00 	lds	r30, 0x0083
    16be:	f0 91 84 00 	lds	r31, 0x0084
    16c2:	09 95       	icall
	}
	TIFR  |= (1<<TOIE1); // Clear MIF (Interrupt Flag)
    16c4:	a8 e5       	ldi	r26, 0x58	; 88
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e8 e5       	ldi	r30, 0x58	; 88
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	8c 93       	st	X, r24
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_6>:
/* Timer1 Compare ISR */
ISR(TIMER1_COMPA_vect)
{
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	6f 93       	push	r22
    170c:	7f 93       	push	r23
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    1722:	80 91 83 00 	lds	r24, 0x0083
    1726:	90 91 84 00 	lds	r25, 0x0084
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	29 f0       	breq	.+10     	; 0x1738 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer1)(); /* another method to call the function using pointer to function g_callBackPtrTimer1(); */
    172e:	e0 91 83 00 	lds	r30, 0x0083
    1732:	f0 91 84 00 	lds	r31, 0x0084
    1736:	09 95       	icall
	}
	TIFR  |= (1<<OCIE1A); // Clear MIF (Interrupt Flag)
    1738:	a8 e5       	ldi	r26, 0x58	; 88
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e5       	ldi	r30, 0x58	; 88
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_4>:

/* Timer2 Overflow ISR */
ISR(TIMER2_OVF_vect)
{
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    1796:	80 91 85 00 	lds	r24, 0x0085
    179a:	90 91 86 00 	lds	r25, 0x0086
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	29 f0       	breq	.+10     	; 0x17ac <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_callBackPtrTimer2)(); /* another method to call the function using pointer to function g_callBackPtrTimer2(); */
    17a2:	e0 91 85 00 	lds	r30, 0x0085
    17a6:	f0 91 86 00 	lds	r31, 0x0086
    17aa:	09 95       	icall
	}
	TIFR  |= (1<<TOV2); // Clear MIF (Interrupt Flag)
    17ac:	a8 e5       	ldi	r26, 0x58	; 88
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e8 e5       	ldi	r30, 0x58	; 88
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 64       	ori	r24, 0x40	; 64
    17b8:	8c 93       	st	X, r24
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_3>:
/* Timer2 Compare ISR */
ISR(TIMER2_COMP_vect)
{
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    180a:	80 91 85 00 	lds	r24, 0x0085
    180e:	90 91 86 00 	lds	r25, 0x0086
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	29 f0       	breq	.+10     	; 0x1820 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare match is detected */
		(*g_callBackPtrTimer2)(); /* another method to call the function using pointer to function g_callBackPtrTimer2(); */
    1816:	e0 91 85 00 	lds	r30, 0x0085
    181a:	f0 91 86 00 	lds	r31, 0x0086
    181e:	09 95       	icall
	}
	TIFR  |= (1<<OCF2); // Clear MIF (Interrupt Flag)
    1820:	a8 e5       	ldi	r26, 0x58	; 88
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e8 e5       	ldi	r30, 0x58	; 88
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	8c 93       	st	X, r24
}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <Timer_init>:
 * 	3. Set the Initial Value (Normal or Compare modes).
 * 	4. Set the Compare Value (Compare mode ONLY).
 * 	5. Set Pre_scaler for the timer.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <Timer_init+0x6>
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	/* Check on the Timer channel */
	if((Config_Ptr->Channel) == TIMER_0) /*Timer 0*/
    1862:	e9 81       	ldd	r30, Y+1	; 0x01
    1864:	fa 81       	ldd	r31, Y+2	; 0x02
    1866:	80 81       	ld	r24, Z
    1868:	88 23       	and	r24, r24
    186a:	09 f0       	breq	.+2      	; 0x186e <Timer_init+0x1a>
    186c:	72 c0       	rjmp	.+228    	; 0x1952 <Timer_init+0xfe>
	{
		if((Config_Ptr->Mode) == NORMAL)
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	81 81       	ldd	r24, Z+1	; 0x01
    1874:	88 23       	and	r24, r24
    1876:	e1 f4       	brne	.+56     	; 0x18b0 <Timer_init+0x5c>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    1878:	a2 e5       	ldi	r26, 0x52	; 82
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Normal mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Set Pre-scaler
			 */
			TCCR0  = (1<<FOC0) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Normal Mode */
    1886:	a3 e5       	ldi	r26, 0x53	; 83
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e3 e5       	ldi	r30, 0x53	; 83
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	88 77       	andi	r24, 0x78	; 120
    1892:	98 2f       	mov	r25, r24
    1894:	90 68       	ori	r25, 0x80	; 128
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	86 81       	ldd	r24, Z+6	; 0x06
    189c:	89 2b       	or	r24, r25
    189e:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0); /* Enable Timer0 OVF Interrupt enable (MIE) */
    18a0:	a9 e5       	ldi	r26, 0x59	; 89
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e9 e5       	ldi	r30, 0x59	; 89
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
    18ae:	54 c1       	rjmp	.+680    	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    18b0:	e9 81       	ldd	r30, Y+1	; 0x01
    18b2:	fa 81       	ldd	r31, Y+2	; 0x02
    18b4:	81 81       	ldd	r24, Z+1	; 0x01
    18b6:	82 30       	cpi	r24, 0x02	; 2
    18b8:	19 f5       	brne	.+70     	; 0x1900 <Timer_init+0xac>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    18ba:	a2 e5       	ldi	r26, 0x52	; 82
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e9 81       	ldd	r30, Y+1	; 0x01
    18c0:	fa 81       	ldd	r31, Y+2	; 0x02
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	8c 93       	st	X, r24
			OCR0   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    18c8:	ac e5       	ldi	r26, 0x5C	; 92
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	84 81       	ldd	r24, Z+4	; 0x04
    18d2:	95 81       	ldd	r25, Z+5	; 0x05
    18d4:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Compare mode FOC0=1
			 * 2. Compare Mode WGM01=1 & WGM00=0
			 * 3. Set Pre-scaler
			 */
			TCCR0  = (1<<FOC0) | (1<<WGM01) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Compare Mode */
    18d6:	a3 e5       	ldi	r26, 0x53	; 83
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e3 e5       	ldi	r30, 0x53	; 83
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 77       	andi	r24, 0x70	; 112
    18e2:	98 2f       	mov	r25, r24
    18e4:	98 68       	ori	r25, 0x88	; 136
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	86 81       	ldd	r24, Z+6	; 0x06
    18ec:	89 2b       	or	r24, r25
    18ee:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt enable (MIE) */
    18f0:	a9 e5       	ldi	r26, 0x59	; 89
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e9 e5       	ldi	r30, 0x59	; 89
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	8c 93       	st	X, r24
    18fe:	2c c1       	rjmp	.+600    	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	81 81       	ldd	r24, Z+1	; 0x01
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	09 f0       	breq	.+2      	; 0x190c <Timer_init+0xb8>
    190a:	26 c1       	rjmp	.+588    	; 0x1b58 <Timer_init+0x304>
		{
			TCNT0  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    190c:	a2 e5       	ldi	r26, 0x52	; 82
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	8c 93       	st	X, r24
			OCR0   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    191a:	ac e5       	ldi	r26, 0x5C	; 92
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	84 81       	ldd	r24, Z+4	; 0x04
    1924:	95 81       	ldd	r25, Z+5	; 0x05
    1926:	8c 93       	st	X, r24
			DDRB  |= (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1928:	a7 e3       	ldi	r26, 0x37	; 55
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e7 e3       	ldi	r30, 0x37	; 55
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	88 60       	ori	r24, 0x08	; 8
    1934:	8c 93       	st	X, r24
			TCCR0  = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (TCCR0 & 0xF8) | (Config_Ptr->Prescaler);
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	80 79       	andi	r24, 0x90	; 144
    1942:	98 2f       	mov	r25, r24
    1944:	98 66       	ori	r25, 0x68	; 104
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	86 81       	ldd	r24, Z+6	; 0x06
    194c:	89 2b       	or	r24, r25
    194e:	8c 93       	st	X, r24
    1950:	03 c1       	rjmp	.+518    	; 0x1b58 <Timer_init+0x304>
		}
	}
	else if((Config_Ptr->Channel) == TIMER_1)
    1952:	e9 81       	ldd	r30, Y+1	; 0x01
    1954:	fa 81       	ldd	r31, Y+2	; 0x02
    1956:	80 81       	ld	r24, Z
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	09 f0       	breq	.+2      	; 0x195e <Timer_init+0x10a>
    195c:	87 c0       	rjmp	.+270    	; 0x1a6c <Timer_init+0x218>
	{
		if((Config_Ptr->Mode) == NORMAL)
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	81 81       	ldd	r24, Z+1	; 0x01
    1964:	88 23       	and	r24, r24
    1966:	09 f5       	brne	.+66     	; 0x19aa <Timer_init+0x156>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    1968:	ac e4       	ldi	r26, 0x4C	; 76
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	9c 93       	st	X, r25
    1978:	8e 93       	st	-X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 0)
			 */
			TCCR1A = (1<<FOC1A);
    197a:	ef e4       	ldi	r30, 0x4F	; 79
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	88 e0       	ldi	r24, 0x08	; 8
    1980:	80 83       	st	Z, r24
			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 0)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    1982:	ae e4       	ldi	r26, 0x4E	; 78
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ee e4       	ldi	r30, 0x4E	; 78
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	98 2f       	mov	r25, r24
    198e:	98 7f       	andi	r25, 0xF8	; 248
    1990:	e9 81       	ldd	r30, Y+1	; 0x01
    1992:	fa 81       	ldd	r31, Y+2	; 0x02
    1994:	86 81       	ldd	r24, Z+6	; 0x06
    1996:	89 2b       	or	r24, r25
    1998:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE1); /* Enable Timer1 OVF Interrupt enable (MIE) */
    199a:	a9 e5       	ldi	r26, 0x59	; 89
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e9 e5       	ldi	r30, 0x59	; 89
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	84 60       	ori	r24, 0x04	; 4
    19a6:	8c 93       	st	X, r24
    19a8:	d7 c0       	rjmp	.+430    	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	59 f5       	brne	.+86     	; 0x1a0a <Timer_init+0x1b6>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    19b4:	ac e4       	ldi	r26, 0x4C	; 76
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ba:	fa 81       	ldd	r31, Y+2	; 0x02
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	9c 93       	st	X, r25
    19c4:	8e 93       	st	-X, r24
			OCR1A  = (Config_Ptr->Compare); // Output Compare Register
    19c6:	aa e4       	ldi	r26, 0x4A	; 74
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	84 81       	ldd	r24, Z+4	; 0x04
    19d0:	95 81       	ldd	r25, Z+5	; 0x05
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	9c 93       	st	X, r25
    19d6:	8e 93       	st	-X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    19d8:	ef e4       	ldi	r30, 0x4F	; 79
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (1<<WGM12) | (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    19e0:	ae e4       	ldi	r26, 0x4E	; 78
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ee e4       	ldi	r30, 0x4E	; 78
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 7f       	andi	r24, 0xF0	; 240
    19ec:	98 2f       	mov	r25, r24
    19ee:	98 60       	ori	r25, 0x08	; 8
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	86 81       	ldd	r24, Z+6	; 0x06
    19f6:	89 2b       	or	r24, r25
    19f8:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare Interrupt enable (MIE)  */
    19fa:	a9 e5       	ldi	r26, 0x59	; 89
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e9 e5       	ldi	r30, 0x59	; 89
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	80 61       	ori	r24, 0x10	; 16
    1a06:	8c 93       	st	X, r24
    1a08:	a7 c0       	rjmp	.+334    	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    1a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0e:	81 81       	ldd	r24, Z+1	; 0x01
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <Timer_init+0x1c2>
    1a14:	a1 c0       	rjmp	.+322    	; 0x1b58 <Timer_init+0x304>
		{
			TCNT1  = (Config_Ptr->Initial); // Timer Counter Register
    1a16:	ac e4       	ldi	r26, 0x4C	; 76
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	11 96       	adiw	r26, 0x01	; 1
    1a24:	9c 93       	st	X, r25
    1a26:	8e 93       	st	-X, r24
			OCR1A  = (Config_Ptr->Compare); // Output Compare Register
    1a28:	aa e4       	ldi	r26, 0x4A	; 74
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	95 81       	ldd	r25, Z+5	; 0x05
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
			DDRD |= (1<<PD5); //set PD5/OC1A as output pin --> pin where the PWM signal is generated from MC.
    1a3a:	a1 e3       	ldi	r26, 0x31	; 49
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e1 e3       	ldi	r30, 0x31	; 49
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Connect OC1A and Disconnect OC1B  COM1A1=1 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=0 FOC1B=0
			 * 3. Fast PWM Mode WGM10=1 WGM11=1 (Mode Number 15)
			 */
			TCCR1A = (1<<COM1A1) | (1<<WGM10) | (1<<WGM11);
    1a48:	ef e4       	ldi	r30, 0x4F	; 79
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	83 e8       	ldi	r24, 0x83	; 131
    1a4e:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Fast PW WGM12=1 WGM13=1 (Mode Number 15)
			 * 2. Set Pre-scaler
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | (TCCR1B & 0xF8) | (Config_Ptr->Prescaler);
    1a50:	ae e4       	ldi	r26, 0x4E	; 78
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ee e4       	ldi	r30, 0x4E	; 78
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 7e       	andi	r24, 0xE0	; 224
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	98 61       	ori	r25, 0x18	; 24
    1a60:	e9 81       	ldd	r30, Y+1	; 0x01
    1a62:	fa 81       	ldd	r31, Y+2	; 0x02
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	89 2b       	or	r24, r25
    1a68:	8c 93       	st	X, r24
    1a6a:	76 c0       	rjmp	.+236    	; 0x1b58 <Timer_init+0x304>
		}
	}
	else if((Config_Ptr->Channel) == TIMER_2)
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	80 81       	ld	r24, Z
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <Timer_init+0x224>
    1a76:	70 c0       	rjmp	.+224    	; 0x1b58 <Timer_init+0x304>
	{
		if((Config_Ptr->Mode) == NORMAL)
    1a78:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7c:	81 81       	ldd	r24, Z+1	; 0x01
    1a7e:	88 23       	and	r24, r24
    1a80:	e1 f4       	brne	.+56     	; 0x1aba <Timer_init+0x266>
		{
			TCNT2  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    1a82:	a4 e4       	ldi	r26, 0x44	; 68
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Normal mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Set Pre-scaler
			 */
			TCCR2  = (1<<FOC2) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Normal Mode */
    1a90:	a5 e4       	ldi	r26, 0x45	; 69
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e4       	ldi	r30, 0x45	; 69
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 77       	andi	r24, 0x78	; 120
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	90 68       	ori	r25, 0x80	; 128
    1aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	89 2b       	or	r24, r25
    1aa8:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2); /* Enable Timer0 OVF Interrupt enable (MIE) */
    1aaa:	a9 e5       	ldi	r26, 0x59	; 89
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e9 e5       	ldi	r30, 0x59	; 89
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 64       	ori	r24, 0x40	; 64
    1ab6:	8c 93       	st	X, r24
    1ab8:	4f c0       	rjmp	.+158    	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == COMPARE)
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	81 81       	ldd	r24, Z+1	; 0x01
    1ac0:	82 30       	cpi	r24, 0x02	; 2
    1ac2:	19 f5       	brne	.+70     	; 0x1b0a <Timer_init+0x2b6>
		{
			TCNT2  = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    1ac4:	a4 e4       	ldi	r26, 0x44	; 68
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	8c 93       	st	X, r24
			OCR2   = (uint8)(Config_Ptr->Compare); // Output Compare Register
    1ad2:	a3 e4       	ldi	r26, 0x43	; 67
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ada:	84 81       	ldd	r24, Z+4	; 0x04
    1adc:	95 81       	ldd	r25, Z+5	; 0x05
    1ade:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Compare mode FOC2=1
			 * 2. Compare Mode WGM21=1 & WGM20=0
			 * 3. Set Pre-scaler
			 */
			TCCR2  = (1<<FOC2) | (1<<WGM21) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);  /*For setting Pre-scaler in Compare Mode */
    1ae0:	a5 e4       	ldi	r26, 0x45	; 69
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e4       	ldi	r30, 0x45	; 69
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 77       	andi	r24, 0x70	; 112
    1aec:	98 2f       	mov	r25, r24
    1aee:	98 68       	ori	r25, 0x88	; 136
    1af0:	e9 81       	ldd	r30, Y+1	; 0x01
    1af2:	fa 81       	ldd	r31, Y+2	; 0x02
    1af4:	86 81       	ldd	r24, Z+6	; 0x06
    1af6:	89 2b       	or	r24, r25
    1af8:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2); /* Enable Timer0 Compare Interrupt enable (MIE) */
    1afa:	a9 e5       	ldi	r26, 0x59	; 89
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e9 e5       	ldi	r30, 0x59	; 89
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	8c 93       	st	X, r24
    1b08:	27 c0       	rjmp	.+78     	; 0x1b58 <Timer_init+0x304>
		}
		else if((Config_Ptr->Mode) == PWM)
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	81 81       	ldd	r24, Z+1	; 0x01
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	11 f5       	brne	.+68     	; 0x1b58 <Timer_init+0x304>
		{
			TCNT2 = (uint8)(Config_Ptr->Initial); // Timer Counter Register
    1b14:	a4 e4       	ldi	r26, 0x44	; 68
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	8c 93       	st	X, r24
			OCR2  = (uint8)(Config_Ptr->Compare); // Output Compare Register
    1b22:	a3 e4       	ldi	r26, 0x43	; 67
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e9 81       	ldd	r30, Y+1	; 0x01
    1b28:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	95 81       	ldd	r25, Z+5	; 0x05
    1b2e:	8c 93       	st	X, r24
			DDRD |= (1<<PD7); //set PD7/OC2 as output pin --> pin where the PWM signal is generated from MC.
    1b30:	a1 e3       	ldi	r26, 0x31	; 49
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e1 e3       	ldi	r30, 0x31	; 49
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	8c 93       	st	X, r24
			TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (TCCR2 & 0xF8) | (Config_Ptr->Prescaler);
    1b3e:	a5 e4       	ldi	r26, 0x45	; 69
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e4       	ldi	r30, 0x45	; 69
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 79       	andi	r24, 0x90	; 144
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	98 66       	ori	r25, 0x68	; 104
    1b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b50:	fa 81       	ldd	r31, Y+2	; 0x02
    1b52:	86 81       	ldd	r24, Z+6	; 0x06
    1b54:	89 2b       	or	r24, r25
    1b56:	8c 93       	st	X, r24
		}
	}
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer0 .
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <Timer0_setCallBack+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer0 = a_ptr;
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	90 93 82 00 	sts	0x0082, r25
    1b78:	80 93 81 00 	sts	0x0081, r24
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer1 .
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <Timer1_setCallBack+0x6>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer1 = a_ptr;
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	90 93 84 00 	sts	0x0084, r25
    1b9c:	80 93 83 00 	sts	0x0083, r24
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer2 .
 */
void Timer2_setCallBack(void(*a_ptr)(void))
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <Timer2_setCallBack+0x6>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTimer2 = a_ptr;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	90 93 86 00 	sts	0x0086, r25
    1bc0:	80 93 85 00 	sts	0x0085, r24
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <Timer_DeInit>:

/*
 * Description: Function to disable the Timer
 */
void Timer_DeInit(const Timer_channel Channel)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	if((Channel) == TIMER_0)
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	88 23       	and	r24, r24
    1bde:	89 f4       	brne	.+34     	; 0x1c02 <Timer_DeInit+0x34>
	{
		TCCR0 = 0;
    1be0:	e3 e5       	ldi	r30, 0x53	; 83
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	10 82       	st	Z, r1
		TCNT0 = 0;
    1be6:	e2 e5       	ldi	r30, 0x52	; 82
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	10 82       	st	Z, r1
		OCR0  = 0;
    1bec:	ec e5       	ldi	r30, 0x5C	; 92
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    1bf2:	a9 e5       	ldi	r26, 0x59	; 89
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e9 e5       	ldi	r30, 0x59	; 89
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8c 7f       	andi	r24, 0xFC	; 252
    1bfe:	8c 93       	st	X, r24
    1c00:	2c c0       	rjmp	.+88     	; 0x1c5a <Timer_DeInit+0x8c>
	}
	else if((Channel)== TIMER_1)
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	b1 f4       	brne	.+44     	; 0x1c34 <Timer_DeInit+0x66>
	{
		TCCR1A = 0;
    1c08:	ef e4       	ldi	r30, 0x4F	; 79
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	10 82       	st	Z, r1
		TCCR1B = 0;
    1c0e:	ee e4       	ldi	r30, 0x4E	; 78
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	10 82       	st	Z, r1
		TCNT1 = 0;
    1c14:	ec e4       	ldi	r30, 0x4C	; 76
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	11 82       	std	Z+1, r1	; 0x01
    1c1a:	10 82       	st	Z, r1
		OCR1A = 0;
    1c1c:	ea e4       	ldi	r30, 0x4A	; 74
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	11 82       	std	Z+1, r1	; 0x01
    1c22:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    1c24:	a9 e5       	ldi	r26, 0x59	; 89
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e9 e5       	ldi	r30, 0x59	; 89
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8b 7e       	andi	r24, 0xEB	; 235
    1c30:	8c 93       	st	X, r24
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <Timer_DeInit+0x8c>
	}
	else if((Channel) == TIMER_2)
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	81 f4       	brne	.+32     	; 0x1c5a <Timer_DeInit+0x8c>
	{
		TCCR2 = 0;
    1c3a:	e5 e4       	ldi	r30, 0x45	; 69
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	10 82       	st	Z, r1
		TCNT2 = 0;
    1c40:	e4 e4       	ldi	r30, 0x44	; 68
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	10 82       	st	Z, r1
		OCR2  = 0;
    1c46:	e3 e4       	ldi	r30, 0x43	; 67
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    1c4c:	a9 e5       	ldi	r26, 0x59	; 89
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e9 e5       	ldi	r30, 0x59	; 89
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 73       	andi	r24, 0x3F	; 63
    1c58:	8c 93       	st	X, r24
	}
}
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <PWM_setDutyCycle>:

/* Function to set PWM , it can work with timer0 or timer2 , duty cycle is a value from 0 -> 100 (%) */
void PWM_setDutyCycle(uint16 OCR_value, const Timer_channel Channel)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <PWM_setDutyCycle+0x6>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	6b 83       	std	Y+3, r22	; 0x03
	if((Channel) == TIMER_0)
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 23       	and	r24, r24
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <PWM_setDutyCycle+0x22>
	{
		OCR0 = (uint8)OCR_value;
    1c7a:	ec e5       	ldi	r30, 0x5C	; 92
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	11 c0       	rjmp	.+34     	; 0x1ca6 <PWM_setDutyCycle+0x44>
	}
	else if((Channel)== TIMER_1)
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	39 f4       	brne	.+14     	; 0x1c98 <PWM_setDutyCycle+0x36>
	{
		OCR1A  = OCR_value;
    1c8a:	ea e4       	ldi	r30, 0x4A	; 74
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <PWM_setDutyCycle+0x44>
	}
	else if((Channel) == TIMER_2)
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	21 f4       	brne	.+8      	; 0x1ca6 <PWM_setDutyCycle+0x44>
	{
		OCR2 = (uint8)OCR_value;
    1c9e:	e3 e4       	ldi	r30, 0x43	; 67
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	80 83       	st	Z, r24
	}
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* UART RX Complete ISR */
ISR(USART_RXC_vect)
{
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	g_UART_Result = UDR;
    1ccc:	ec e2       	ldi	r30, 0x2C	; 44
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	90 93 88 00 	sts	0x0088, r25
    1cda:	80 93 87 00 	sts	0x0087, r24
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	ff 91       	pop	r31
    1ce4:	ef 91       	pop	r30
    1ce6:	9f 91       	pop	r25
    1ce8:	8f 91       	pop	r24
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	0f 90       	pop	r0
    1cf0:	1f 90       	pop	r1
    1cf2:	18 95       	reti

00001cf4 <UART_init>:
 * 	2. Set the number of Parity bits in the UART frame.
 * 	3. Set the number of Stop bits in the UART frame.
 * 	4. Set the Baud Rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <UART_init+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <UART_init+0x8>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <UART_init+0xa>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
	uint32 BAUD_PRESCALE = (((F_CPU / ((Config_Ptr->Baud) * 8))) - 1);
    1d06:	ed 81       	ldd	r30, Y+5	; 0x05
    1d08:	fe 81       	ldd	r31, Y+6	; 0x06
    1d0a:	83 81       	ldd	r24, Z+3	; 0x03
    1d0c:	94 81       	ldd	r25, Z+4	; 0x04
    1d0e:	a5 81       	ldd	r26, Z+5	; 0x05
    1d10:	b6 81       	ldd	r27, Z+6	; 0x06
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	aa 1f       	adc	r26, r26
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	ad 01       	movw	r20, r26
    1d2e:	80 e4       	ldi	r24, 0x40	; 64
    1d30:	92 e4       	ldi	r25, 0x42	; 66
    1d32:	af e0       	ldi	r26, 0x0F	; 15
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
    1d3e:	da 01       	movw	r26, r20
    1d40:	c9 01       	movw	r24, r18
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	a1 09       	sbc	r26, r1
    1d46:	b1 09       	sbc	r27, r1
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	ab 83       	std	Y+3, r26	; 0x03
    1d4e:	bc 83       	std	Y+4, r27	; 0x04
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d50:	eb e2       	ldi	r30, 0x2B	; 43
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
    1d58:	ea e2       	ldi	r30, 0x2A	; 42
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	88 e9       	ldi	r24, 0x98	; 152
    1d5e:	80 83       	st	Z, r24
	if((Config_Ptr->Data)==NINE_Bit)
    1d60:	ed 81       	ldd	r30, Y+5	; 0x05
    1d62:	fe 81       	ldd	r31, Y+6	; 0x06
    1d64:	80 81       	ld	r24, Z
    1d66:	87 30       	cpi	r24, 0x07	; 7
    1d68:	39 f4       	brne	.+14     	; 0x1d78 <UART_init+0x84>
	{
		SET_BIT(UCSRB,UCSZ2);
    1d6a:	aa e2       	ldi	r26, 0x2A	; 42
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	ea e2       	ldi	r30, 0x2A	; 42
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	84 60       	ori	r24, 0x04	; 4
    1d76:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit , 10 Enable Even Parity , 11 Enable Odd Parity
	 * USBS    = 0 One stop bit , 1 Two stop bits
	 * UCSZ1:0 = 00(5-bit mode) , 01 (6-bit mode) , 10 (7-bit mode) , 11 (8-bit mode)
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (UCSRC&0xC1) | (((Config_Ptr->Data)<<1)&0x06) | (((Config_Ptr->Parity)<<4)&0x30) | (((Config_Ptr->Stop)<<3)&0x08);
    1d78:	a0 e4       	ldi	r26, 0x40	; 64
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e0 e4       	ldi	r30, 0x40	; 64
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	81 74       	andi	r24, 0x41	; 65
    1d84:	28 2f       	mov	r18, r24
    1d86:	20 68       	ori	r18, 0x80	; 128
    1d88:	ed 81       	ldd	r30, Y+5	; 0x05
    1d8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	86 70       	andi	r24, 0x06	; 6
    1d98:	28 2b       	or	r18, r24
    1d9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d9e:	81 81       	ldd	r24, Z+1	; 0x01
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	82 95       	swap	r24
    1da6:	92 95       	swap	r25
    1da8:	90 7f       	andi	r25, 0xF0	; 240
    1daa:	98 27       	eor	r25, r24
    1dac:	80 7f       	andi	r24, 0xF0	; 240
    1dae:	98 27       	eor	r25, r24
    1db0:	80 73       	andi	r24, 0x30	; 48
    1db2:	28 2b       	or	r18, r24
    1db4:	ed 81       	ldd	r30, Y+5	; 0x05
    1db6:	fe 81       	ldd	r31, Y+6	; 0x06
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 70       	andi	r24, 0x08	; 8
    1dcc:	82 2b       	or	r24, r18
    1dce:	8c 93       	st	X, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ((uint8)BAUD_PRESCALE)>>8;
    1dd0:	e0 e4       	ldi	r30, 0x40	; 64
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	89 2f       	mov	r24, r25
    1ddc:	99 0f       	add	r25, r25
    1dde:	99 0b       	sbc	r25, r25
    1de0:	80 83       	st	Z, r24
	UBRRL =  (uint8)BAUD_PRESCALE;
    1de2:	e9 e2       	ldi	r30, 0x29	; 41
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	80 83       	st	Z, r24

}
    1dea:	26 96       	adiw	r28, 0x06	; 6
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e08:	eb e2       	ldi	r30, 0x2B	; 43
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	80 72       	andi	r24, 0x20	; 32
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	b9 f3       	breq	.-18     	; 0x1e08 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1e1a:	ec e2       	ldi	r30, 0x2C	; 44
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	80 83       	st	Z, r24
}
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1e32:	eb e2       	ldi	r30, 0x2B	; 43
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 23       	and	r24, r24
    1e3a:	dc f7       	brge	.-10     	; 0x1e32 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1e3c:	ec e2       	ldi	r30, 0x2C	; 44
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <UART_sendString+0x6>
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	9b 83       	std	Y+3, r25	; 0x03
    1e56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e58:	19 82       	std	Y+1, r1	; 0x01
    1e5a:	0e c0       	rjmp	.+28     	; 0x1e78 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	fc 01       	movw	r30, r24
    1e68:	e2 0f       	add	r30, r18
    1e6a:	f3 1f       	adc	r31, r19
    1e6c:	80 81       	ld	r24, Z
    1e6e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <UART_sendByte>
		i++;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 23       	and	r24, r24
    1e8c:	39 f7       	brne	.-50     	; 0x1e5c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <UART_receiveString+0x6>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = g_UART_Result;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 91 87 00 	lds	r24, 0x0087
    1ec0:	90 91 88 00 	lds	r25, 0x0088
    1ec4:	80 83       	st	Z, r24
    1ec6:	10 c0       	rjmp	.+32     	; 0x1ee8 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = g_UART_Result;
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 91 87 00 	lds	r24, 0x0087
    1ee2:	90 91 88 00 	lds	r25, 0x0088
    1ee6:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = g_UART_Result;
	while(Str[i] != '#')
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e2 0f       	add	r30, r18
    1ef6:	f3 1f       	adc	r31, r19
    1ef8:	80 81       	ld	r24, Z
    1efa:	83 32       	cpi	r24, 0x23	; 35
    1efc:	29 f7       	brne	.-54     	; 0x1ec8 <UART_receiveString+0x2e>
	{
		i++;
		Str[i] = g_UART_Result;
	}
	Str[i] = '\0';
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	10 82       	st	Z, r1
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <__udivmodsi4>:
    1f1c:	a1 e2       	ldi	r26, 0x21	; 33
    1f1e:	1a 2e       	mov	r1, r26
    1f20:	aa 1b       	sub	r26, r26
    1f22:	bb 1b       	sub	r27, r27
    1f24:	fd 01       	movw	r30, r26
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <__udivmodsi4_ep>

00001f28 <__udivmodsi4_loop>:
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	ee 1f       	adc	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	a2 17       	cp	r26, r18
    1f32:	b3 07       	cpc	r27, r19
    1f34:	e4 07       	cpc	r30, r20
    1f36:	f5 07       	cpc	r31, r21
    1f38:	20 f0       	brcs	.+8      	; 0x1f42 <__udivmodsi4_ep>
    1f3a:	a2 1b       	sub	r26, r18
    1f3c:	b3 0b       	sbc	r27, r19
    1f3e:	e4 0b       	sbc	r30, r20
    1f40:	f5 0b       	sbc	r31, r21

00001f42 <__udivmodsi4_ep>:
    1f42:	66 1f       	adc	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	1a 94       	dec	r1
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <__udivmodsi4_loop>
    1f4e:	60 95       	com	r22
    1f50:	70 95       	com	r23
    1f52:	80 95       	com	r24
    1f54:	90 95       	com	r25
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	bd 01       	movw	r22, r26
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	08 95       	ret

00001f60 <__prologue_saves__>:
    1f60:	2f 92       	push	r2
    1f62:	3f 92       	push	r3
    1f64:	4f 92       	push	r4
    1f66:	5f 92       	push	r5
    1f68:	6f 92       	push	r6
    1f6a:	7f 92       	push	r7
    1f6c:	8f 92       	push	r8
    1f6e:	9f 92       	push	r9
    1f70:	af 92       	push	r10
    1f72:	bf 92       	push	r11
    1f74:	cf 92       	push	r12
    1f76:	df 92       	push	r13
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	ca 1b       	sub	r28, r26
    1f8a:	db 0b       	sbc	r29, r27
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	09 94       	ijmp

00001f98 <__epilogue_restores__>:
    1f98:	2a 88       	ldd	r2, Y+18	; 0x12
    1f9a:	39 88       	ldd	r3, Y+17	; 0x11
    1f9c:	48 88       	ldd	r4, Y+16	; 0x10
    1f9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1faa:	b9 84       	ldd	r11, Y+9	; 0x09
    1fac:	c8 84       	ldd	r12, Y+8	; 0x08
    1fae:	df 80       	ldd	r13, Y+7	; 0x07
    1fb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fba:	b9 81       	ldd	r27, Y+1	; 0x01
    1fbc:	ce 0f       	add	r28, r30
    1fbe:	d1 1d       	adc	r29, r1
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	ed 01       	movw	r28, r26
    1fcc:	08 95       	ret

00001fce <_exit>:
    1fce:	f8 94       	cli

00001fd0 <__stop_program>:
    1fd0:	ff cf       	rjmp	.-2      	; 0x1fd0 <__stop_program>
